{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1c4db301",
   "metadata": {},
   "source": [
    "# **영양소 EDA**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "213ec518",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'c:\\\\Users\\\\withk\\\\OneDrive - 동국대학교\\\\바탕 화면\\\\baf_25-2'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%pwd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fcabed0",
   "metadata": {},
   "source": [
    "## **1. 데이터 불러오기**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f1ea8642",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np \n",
    "from textwrap import fill\n",
    "import seaborn as sns\n",
    "from pandas.plotting import scatter_matrix\n",
    "\n",
    "pd.set_option(\"display.max_rows\", None)   # 행 모두 출력\n",
    "pd.set_option(\"display.max_columns\", None) # 열 모두 출력\n",
    "\n",
    "# (윈도우) 한글 폰트 세팅\n",
    "plt.rcParams[\"font.family\"] = \"Malgun Gothic\"   # 맑은 고딕\n",
    "plt.rcParams[\"axes.unicode_minus\"] = False      # 마이너스 깨짐 방지\n",
    "\n",
    "food_csv = \"20250408_음식DB.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c3329d5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "cols = [\"식품명\",\"식품대분류명\",\"에너지(kcal)\",\"단백질(g)\",\"지방(g)\",\n",
    "            \"탄수화물(g)\",\"나트륨(mg)\",\"당류(g)\"] # 식이섬유는 필요시 포함.\n",
    "\n",
    "df_food = pd.read_csv(food_csv, usecols=cols, encoding=\"utf-8-sig\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "382efd5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 숫자형 변환\n",
    "num_cols = [\"에너지(kcal)\",\"단백질(g)\",\"지방(g)\",\n",
    "            \"탄수화물(g)\",\"나트륨(mg)\",\"당류(g)\"]\n",
    "for c in num_cols:\n",
    "    df_food[c] = pd.to_numeric(df_food[c], errors=\"coerce\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60da44b3",
   "metadata": {},
   "source": [
    "#### **식품대분류명 확인 (단일메뉴만 이용)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d7991c45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['곡류, 서류 제품', '과일류', '구이류', '국 및 탕류', '김치류', '나물·숙채류', '두류, 견과 및 종실류', '면 및 만두류', '밥류', '볶음류', '빵 및 과자류', '생채·무침류', '수·조·어·육류', '유제품류 및 빙과류', '음료 및 차류', '장류, 양념류', '장아찌·절임류', '전·적 및 부침류', '젓갈류', '조림류', '죽 및 스프류', '찌개 및 전골류', '찜류', '채소, 해조류', '튀김류']\n"
     ]
    }
   ],
   "source": [
    "CAT = \"식품대분류명\"\n",
    "\n",
    "cats_food = sorted(df_food[CAT].dropna().unique().tolist())\n",
    "\n",
    "print(cats_food)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "224fed51",
   "metadata": {},
   "source": [
    "##### **우리는 단일메뉴로 진행할 것이므로, 음식 데이터에서는 식품대분류명 중 _\"면 및 만두류\", \"밥류\", \"볶음류\", \"구이류\", \"국 및 탕류\"_만 포함하며, 단일메뉴가 존재하지 않는 식품대분류명은 제외**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c227028e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
      "0  국밥_돼지머리     밥류        137    6.70   5.16    15.94   0.16    181.0\n",
      "1  국밥_순대국밥     밥류         75    3.17   2.28    10.38   0.17    126.0\n",
      "2   국밥_콩나물     밥류         52    1.45   0.24    10.93   0.00    172.0\n",
      "3      기장밥     밥류        166    3.44   0.57    36.77   0.00      1.0\n",
      "4       김밥     밥류        140    4.84   4.55    19.98   0.00    307.0\n"
     ]
    }
   ],
   "source": [
    "NAME_FULL  = \"식품명\"\n",
    "\n",
    "# 1) 음식: 메인요리 카테고리만(반찬 제외)\n",
    "keep_main_strict = {\n",
    "    \"면 및 만두류\",\"밥류\",\"볶음류\",\"구이류\",\n",
    "    \"국 및 탕류\",\"죽 및 스프류\",\"찌개 및 전골류\",\n",
    "    \"찜류\",\"튀김류\",\"전·적 및 부침류\", \"수·조·어·육류\"}\n",
    "df_food_main = df_food.loc[df_food[CAT].isin(keep_main_strict)].copy()\n",
    "\n",
    "print(df_food_main.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b358649",
   "metadata": {},
   "source": [
    "##### **음식명_재료명 인 형태인 데이터도 존재하기 때문에 '음식명'만을 가지고 있는 데이터만 뽑아내겠음.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "dad23162",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1) 괄호 제거 후 공백 정리\n",
    "name_clean = (df_food_main[\"식품명\"].astype(str)\n",
    "              .str.replace(r\"\\([^)]*\\)\", \"\", regex=True).str.strip())\n",
    "\n",
    "# 2) 구분자가 하나라도 있으면 '재료가 붙은 행'으로 간주\n",
    "has_sep = name_clean.str.contains(r\"[ _\\-\\u00B7·/,]\")\n",
    "\n",
    "# 3) 구분자 없는 행만 보기 (= 음식 단독 표기)\n",
    "df = df_food_main.loc[~has_sep].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c41f7ab7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1451, 8)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>기장밥</td>\n",
       "      <td>밥류</td>\n",
       "      <td>166</td>\n",
       "      <td>3.44</td>\n",
       "      <td>0.57</td>\n",
       "      <td>36.77</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>김밥</td>\n",
       "      <td>밥류</td>\n",
       "      <td>140</td>\n",
       "      <td>4.84</td>\n",
       "      <td>4.55</td>\n",
       "      <td>19.98</td>\n",
       "      <td>0.00</td>\n",
       "      <td>307.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>보리밥</td>\n",
       "      <td>밥류</td>\n",
       "      <td>161</td>\n",
       "      <td>2.90</td>\n",
       "      <td>0.24</td>\n",
       "      <td>36.77</td>\n",
       "      <td>2.57</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>볶음밥</td>\n",
       "      <td>밥류</td>\n",
       "      <td>183</td>\n",
       "      <td>5.56</td>\n",
       "      <td>2.76</td>\n",
       "      <td>33.97</td>\n",
       "      <td>0.00</td>\n",
       "      <td>212.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>비빔밥</td>\n",
       "      <td>밥류</td>\n",
       "      <td>142</td>\n",
       "      <td>6.86</td>\n",
       "      <td>4.32</td>\n",
       "      <td>18.84</td>\n",
       "      <td>0.05</td>\n",
       "      <td>232.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "3   기장밥     밥류        166    3.44   0.57    36.77   0.00      1.0\n",
       "4    김밥     밥류        140    4.84   4.55    19.98   0.00    307.0\n",
       "18  보리밥     밥류        161    2.90   0.24    36.77   2.57      4.0\n",
       "19  볶음밥     밥류        183    5.56   2.76    33.97   0.00    212.0\n",
       "27  비빔밥     밥류        142    6.86   4.32    18.84   0.05    232.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>14393</th>\n",
       "      <td>임연수튀김</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>372</td>\n",
       "      <td>26.5</td>\n",
       "      <td>20.12</td>\n",
       "      <td>17.18</td>\n",
       "      <td>0.02</td>\n",
       "      <td>1236.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14394</th>\n",
       "      <td>조기튀김</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>144</td>\n",
       "      <td>13.4</td>\n",
       "      <td>7.77</td>\n",
       "      <td>3.62</td>\n",
       "      <td>0.01</td>\n",
       "      <td>84.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14395</th>\n",
       "      <td>참치강정</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>353</td>\n",
       "      <td>30.3</td>\n",
       "      <td>14.12</td>\n",
       "      <td>23.55</td>\n",
       "      <td>6.87</td>\n",
       "      <td>948.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14396</th>\n",
       "      <td>채소튀김</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>101</td>\n",
       "      <td>1.3</td>\n",
       "      <td>5.28</td>\n",
       "      <td>11.65</td>\n",
       "      <td>1.45</td>\n",
       "      <td>138.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14397</th>\n",
       "      <td>탕수어</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>281</td>\n",
       "      <td>12.6</td>\n",
       "      <td>7.79</td>\n",
       "      <td>38.73</td>\n",
       "      <td>8.36</td>\n",
       "      <td>323.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "14393  임연수튀김    튀김류        372    26.5  20.12    17.18   0.02   1236.0\n",
       "14394   조기튀김    튀김류        144    13.4   7.77     3.62   0.01     84.0\n",
       "14395   참치강정    튀김류        353    30.3  14.12    23.55   6.87    948.0\n",
       "14396   채소튀김    튀김류        101     1.3   5.28    11.65   1.45    138.0\n",
       "14397    탕수어    튀김류        281    12.6   7.79    38.73   8.36    323.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(df.shape) #(1447, 8)\n",
    "display(df.head())\n",
    "display(df.tail())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b68cfed",
   "metadata": {},
   "source": [
    "#### **음식 종류 너무 많아 이미지 학습한 음식 위주로 진행하겠음.(추천 음식 영양소 EDA는 추후에 진행)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2603070c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "정확 일치 총 행수: 65\n",
      "\n",
      "클래스별 건수:\n",
      "식품명\n",
      "감자전       5\n",
      "감자탕       5\n",
      "고기만두      4\n",
      "과메기       0\n",
      "김밥        3\n",
      "떡볶이       2\n",
      "라면        5\n",
      "보쌈        0\n",
      "삼계탕       5\n",
      "새우튀김      4\n",
      "수제비       1\n",
      "순대        5\n",
      "양념치킨      0\n",
      "육회        2\n",
      "족발        2\n",
      "짜장면       4\n",
      "짬뽕        5\n",
      "칼국수       5\n",
      "콩국수       5\n",
      "파전        3\n",
      "피자        0\n",
      "후라이드치킨    0\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# 1) 후보 목록 정리(양끝 공백 제거)\n",
    "food_classes = (\n",
    "    \"감자전\",\"감자탕\",\"과메기\",\"떡볶이\",\"라면\",\"고기만두\",\"보쌈\",\"삼계탕\",\n",
    "    \"새우튀김\",\"수제비\",\"순대\",\"양념치킨\",\"육회\",\"족발\",\"짜장면\",\n",
    "    \"짬뽕\",\"콩국수\",\"파전\",\"피자\",\"후라이드치킨\",\" 칼국수\",\"김밥\")\n",
    "targets = [s.strip() for s in food_classes]  # 공백 제거\n",
    "target_set = set(targets)\n",
    "\n",
    "# 2) 정확 일치 필터 (식품명 공백 제거 후 비교)\n",
    "df_exact = df[df[\"식품명\"].astype(str).str.strip().isin(target_set)].copy()\n",
    "\n",
    "# 3) 결과 빠르게 확인\n",
    "print(\"정확 일치 총 행수:\", len(df_exact))\n",
    "print(\"\\n클래스별 건수:\")\n",
    "print(df_exact[\"식품명\"].value_counts().reindex(sorted(target_set), fill_value=0))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5c51407",
   "metadata": {},
   "source": [
    "#### **감자전, 감자탕, 김밥 등 중복 데이터 존재 -> 하나의 데이터만 남기기**\n",
    "#### **다변량(에너지·단백질·지방·탄수·당·나트륨) 중앙값에 가장 가까운 행 선택**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "873c2934",
   "metadata": {},
   "source": [
    "#### **(1) 감자전**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8f283e81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>270</th>\n",
       "      <td>감자전</td>\n",
       "      <td>전·적 및 부침류</td>\n",
       "      <td>133</td>\n",
       "      <td>1.72</td>\n",
       "      <td>6.54</td>\n",
       "      <td>16.79</td>\n",
       "      <td>1.81</td>\n",
       "      <td>293.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11959</th>\n",
       "      <td>감자전</td>\n",
       "      <td>전·적 및 부침류</td>\n",
       "      <td>93</td>\n",
       "      <td>1.98</td>\n",
       "      <td>3.24</td>\n",
       "      <td>13.75</td>\n",
       "      <td>0.38</td>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12813</th>\n",
       "      <td>감자전</td>\n",
       "      <td>전·적 및 부침류</td>\n",
       "      <td>41</td>\n",
       "      <td>0.80</td>\n",
       "      <td>1.42</td>\n",
       "      <td>6.20</td>\n",
       "      <td>0.11</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13478</th>\n",
       "      <td>감자전</td>\n",
       "      <td>전·적 및 부침류</td>\n",
       "      <td>41</td>\n",
       "      <td>0.80</td>\n",
       "      <td>1.42</td>\n",
       "      <td>6.20</td>\n",
       "      <td>0.11</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14177</th>\n",
       "      <td>감자전</td>\n",
       "      <td>전·적 및 부침류</td>\n",
       "      <td>135</td>\n",
       "      <td>4.10</td>\n",
       "      <td>5.40</td>\n",
       "      <td>16.98</td>\n",
       "      <td>0.02</td>\n",
       "      <td>444.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       식품명     식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "270    감자전  전·적 및 부침류        133    1.72   6.54    16.79   1.81    293.0\n",
       "11959  감자전  전·적 및 부침류         93    1.98   3.24    13.75   0.38     69.0\n",
       "12813  감자전  전·적 및 부침류         41    0.80   1.42     6.20   0.11      1.0\n",
       "13478  감자전  전·적 및 부침류         41    0.80   1.42     6.20   0.11      1.0\n",
       "14177  감자전  전·적 및 부침류        135    4.10   5.40    16.98   0.02    444.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"감자전\"\n",
    "df__1 = df[df[\"식품명\"].astype(str).str.strip() == \"감자전\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__1))\n",
    "df__1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4653bee2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명                감자전\n",
       "식품대분류명       전·적 및 부침류\n",
       "에너지(kcal)           93\n",
       "단백질(g)            1.98\n",
       "지방(g)             3.24\n",
       "탄수화물(g)          13.75\n",
       "당류(g)             0.38\n",
       "나트륨(mg)           69.0\n",
       "Name: 11959, dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"감자전\"].copy()\n",
    "\n",
    "# (선택) 완전중복 제거: 영양소 값이 모두 같은 행은 1개만 유지\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "# 중앙값 벡터\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "# L1 거리(절댓값 합). L2를 쓰고 싶으면 .pow(2).sum()**0.5 로 바꿔도 됨\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__1_1= g.loc[dist.idxmin()]\n",
    "df__1_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3da2d3b8",
   "metadata": {},
   "source": [
    "#### **(2) 감자탕**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9c8ef6a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>감자탕</td>\n",
       "      <td>찌개 및 전골류</td>\n",
       "      <td>71</td>\n",
       "      <td>6.31</td>\n",
       "      <td>4.06</td>\n",
       "      <td>2.27</td>\n",
       "      <td>0.00</td>\n",
       "      <td>328.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11733</th>\n",
       "      <td>감자탕</td>\n",
       "      <td>찌개 및 전골류</td>\n",
       "      <td>27</td>\n",
       "      <td>2.90</td>\n",
       "      <td>0.63</td>\n",
       "      <td>2.35</td>\n",
       "      <td>0.36</td>\n",
       "      <td>109.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12695</th>\n",
       "      <td>감자탕</td>\n",
       "      <td>찌개 및 전골류</td>\n",
       "      <td>51</td>\n",
       "      <td>3.39</td>\n",
       "      <td>2.61</td>\n",
       "      <td>3.87</td>\n",
       "      <td>0.55</td>\n",
       "      <td>172.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13383</th>\n",
       "      <td>감자탕</td>\n",
       "      <td>찌개 및 전골류</td>\n",
       "      <td>65</td>\n",
       "      <td>4.59</td>\n",
       "      <td>3.34</td>\n",
       "      <td>4.50</td>\n",
       "      <td>0.59</td>\n",
       "      <td>216.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14050</th>\n",
       "      <td>감자탕</td>\n",
       "      <td>찌개 및 전골류</td>\n",
       "      <td>67</td>\n",
       "      <td>4.66</td>\n",
       "      <td>3.96</td>\n",
       "      <td>3.37</td>\n",
       "      <td>0.42</td>\n",
       "      <td>145.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       식품명    식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "183    감자탕  찌개 및 전골류         71    6.31   4.06     2.27   0.00    328.0\n",
       "11733  감자탕  찌개 및 전골류         27    2.90   0.63     2.35   0.36    109.0\n",
       "12695  감자탕  찌개 및 전골류         51    3.39   2.61     3.87   0.55    172.0\n",
       "13383  감자탕  찌개 및 전골류         65    4.59   3.34     4.50   0.59    216.0\n",
       "14050  감자탕  찌개 및 전골류         67    4.66   3.96     3.37   0.42    145.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"감자탕\"\n",
    "df__2 = df[df[\"식품명\"].astype(str).str.strip() == \"감자탕\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__2))\n",
    "df__2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4b3b6c2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명               감자탕\n",
       "식품대분류명       찌개 및 전골류\n",
       "에너지(kcal)          51\n",
       "단백질(g)           3.39\n",
       "지방(g)            2.61\n",
       "탄수화물(g)          3.87\n",
       "당류(g)            0.55\n",
       "나트륨(mg)         172.0\n",
       "Name: 12695, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"감자탕\"].copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__2_1= g.loc[dist.idxmin()]\n",
    "df__2_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26ac205e",
   "metadata": {},
   "source": [
    "#### **(3) 김밥**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "643e5de4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 3\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>김밥</td>\n",
       "      <td>밥류</td>\n",
       "      <td>140</td>\n",
       "      <td>4.84</td>\n",
       "      <td>4.55</td>\n",
       "      <td>19.98</td>\n",
       "      <td>0.00</td>\n",
       "      <td>307.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12457</th>\n",
       "      <td>김밥</td>\n",
       "      <td>밥류</td>\n",
       "      <td>185</td>\n",
       "      <td>5.80</td>\n",
       "      <td>2.63</td>\n",
       "      <td>33.81</td>\n",
       "      <td>1.00</td>\n",
       "      <td>420.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13798</th>\n",
       "      <td>김밥</td>\n",
       "      <td>밥류</td>\n",
       "      <td>157</td>\n",
       "      <td>4.70</td>\n",
       "      <td>1.83</td>\n",
       "      <td>29.79</td>\n",
       "      <td>0.69</td>\n",
       "      <td>319.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "4      김밥     밥류        140    4.84   4.55    19.98   0.00    307.0\n",
       "12457  김밥     밥류        185    5.80   2.63    33.81   1.00    420.0\n",
       "13798  김밥     밥류        157    4.70   1.83    29.79   0.69    319.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"김밥\"\n",
    "df__3 = df[df[\"식품명\"].astype(str).str.strip() == \"김밥\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__3))\n",
    "df__3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a63cfbd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명             김밥\n",
       "식품대분류명          밥류\n",
       "에너지(kcal)      157\n",
       "단백질(g)         4.7\n",
       "지방(g)         1.83\n",
       "탄수화물(g)      29.79\n",
       "당류(g)         0.69\n",
       "나트륨(mg)      319.0\n",
       "Name: 13798, dtype: object"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"김밥\"].copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__3_1= g.loc[dist.idxmin()]\n",
    "df__3_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ab8222e",
   "metadata": {},
   "source": [
    "#### **(4) 떡볶이**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c0e872d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>304</th>\n",
       "      <td>떡볶이</td>\n",
       "      <td>볶음류</td>\n",
       "      <td>144</td>\n",
       "      <td>3.51</td>\n",
       "      <td>2.96</td>\n",
       "      <td>25.96</td>\n",
       "      <td>4.40</td>\n",
       "      <td>391.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13537</th>\n",
       "      <td>떡볶이</td>\n",
       "      <td>볶음류</td>\n",
       "      <td>258</td>\n",
       "      <td>4.30</td>\n",
       "      <td>3.62</td>\n",
       "      <td>53.39</td>\n",
       "      <td>8.69</td>\n",
       "      <td>673.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "304    떡볶이    볶음류        144    3.51   2.96    25.96   4.40    391.0\n",
       "13537  떡볶이    볶음류        258    4.30   3.62    53.39   8.69    673.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"떡볶이\"\n",
    "df__4 = df[df[\"식품명\"].astype(str).str.strip() == \"떡볶이\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__4))\n",
    "df__4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "866e9fbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명            떡볶이\n",
       "식품대분류명         볶음류\n",
       "에너지(kcal)      144\n",
       "단백질(g)        3.51\n",
       "지방(g)         2.96\n",
       "탄수화물(g)      25.96\n",
       "당류(g)          4.4\n",
       "나트륨(mg)      391.0\n",
       "Name: 304, dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"떡볶이\"].copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__4_1= g.loc[dist.idxmin()]\n",
    "df__4_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71ae5faa",
   "metadata": {},
   "source": [
    "#### **(5) 라면**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0354bb6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>라면</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>82</td>\n",
       "      <td>1.72</td>\n",
       "      <td>2.28</td>\n",
       "      <td>13.65</td>\n",
       "      <td>0.00</td>\n",
       "      <td>283.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11563</th>\n",
       "      <td>라면</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>79</td>\n",
       "      <td>1.50</td>\n",
       "      <td>2.52</td>\n",
       "      <td>12.19</td>\n",
       "      <td>0.01</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12534</th>\n",
       "      <td>라면</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>169</td>\n",
       "      <td>4.10</td>\n",
       "      <td>5.77</td>\n",
       "      <td>24.49</td>\n",
       "      <td>0.03</td>\n",
       "      <td>128.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13255</th>\n",
       "      <td>라면</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>169</td>\n",
       "      <td>4.10</td>\n",
       "      <td>5.77</td>\n",
       "      <td>24.49</td>\n",
       "      <td>0.03</td>\n",
       "      <td>128.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13881</th>\n",
       "      <td>라면</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>79</td>\n",
       "      <td>1.50</td>\n",
       "      <td>2.52</td>\n",
       "      <td>12.19</td>\n",
       "      <td>0.01</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      식품명   식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "100    라면  면 및 만두류         82    1.72   2.28    13.65   0.00    283.0\n",
       "11563  라면  면 및 만두류         79    1.50   2.52    12.19   0.01     58.0\n",
       "12534  라면  면 및 만두류        169    4.10   5.77    24.49   0.03    128.0\n",
       "13255  라면  면 및 만두류        169    4.10   5.77    24.49   0.03    128.0\n",
       "13881  라면  면 및 만두류         79    1.50   2.52    12.19   0.01     58.0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"라면\"\n",
    "df__5 = df[df[\"식품명\"].astype(str).str.strip() == \"라면\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__5))\n",
    "df__5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7bb0d525",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명               라면\n",
       "식품대분류명       면 및 만두류\n",
       "에너지(kcal)         79\n",
       "단백질(g)           1.5\n",
       "지방(g)           2.52\n",
       "탄수화물(g)        12.19\n",
       "당류(g)           0.01\n",
       "나트륨(mg)         58.0\n",
       "Name: 11563, dtype: object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"라면\"].copy()\n",
    "\n",
    "# (선택) 완전중복 제거: 영양소 값이 모두 같은 행은 1개만 유지\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "# 중앙값 벡터\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "# L1 거리(절댓값 합). L2를 쓰고 싶으면 .pow(2).sum()**0.5 로 바꿔도 됨\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__5_1 = g.loc[dist.idxmin()]\n",
    "df__5_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acb38f77",
   "metadata": {},
   "source": [
    "#### **(6) 삼계탕**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8d198285",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>166</th>\n",
       "      <td>삼계탕</td>\n",
       "      <td>국 및 탕류</td>\n",
       "      <td>101</td>\n",
       "      <td>10.68</td>\n",
       "      <td>4.80</td>\n",
       "      <td>3.84</td>\n",
       "      <td>0.45</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11664</th>\n",
       "      <td>삼계탕</td>\n",
       "      <td>국 및 탕류</td>\n",
       "      <td>88</td>\n",
       "      <td>7.42</td>\n",
       "      <td>3.75</td>\n",
       "      <td>5.64</td>\n",
       "      <td>0.48</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12623</th>\n",
       "      <td>삼계탕</td>\n",
       "      <td>국 및 탕류</td>\n",
       "      <td>77</td>\n",
       "      <td>6.70</td>\n",
       "      <td>3.17</td>\n",
       "      <td>5.00</td>\n",
       "      <td>0.65</td>\n",
       "      <td>160.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13323</th>\n",
       "      <td>삼계탕</td>\n",
       "      <td>국 및 탕류</td>\n",
       "      <td>80</td>\n",
       "      <td>7.32</td>\n",
       "      <td>3.85</td>\n",
       "      <td>3.54</td>\n",
       "      <td>0.29</td>\n",
       "      <td>102.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13977</th>\n",
       "      <td>삼계탕</td>\n",
       "      <td>국 및 탕류</td>\n",
       "      <td>46</td>\n",
       "      <td>5.20</td>\n",
       "      <td>0.34</td>\n",
       "      <td>5.17</td>\n",
       "      <td>0.67</td>\n",
       "      <td>188.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       식품명  식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "166    삼계탕  국 및 탕류        101   10.68   4.80     3.84   0.45     82.0\n",
       "11664  삼계탕  국 및 탕류         88    7.42   3.75     5.64   0.48     58.0\n",
       "12623  삼계탕  국 및 탕류         77    6.70   3.17     5.00   0.65    160.0\n",
       "13323  삼계탕  국 및 탕류         80    7.32   3.85     3.54   0.29    102.0\n",
       "13977  삼계탕  국 및 탕류         46    5.20   0.34     5.17   0.67    188.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"삼계탕\"\n",
    "df__6 = df[df[\"식품명\"].astype(str).str.strip() == \"삼계탕\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__6))\n",
    "df__6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "07f652be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명             삼계탕\n",
       "식품대분류명       국 및 탕류\n",
       "에너지(kcal)        80\n",
       "단백질(g)         7.32\n",
       "지방(g)          3.85\n",
       "탄수화물(g)        3.54\n",
       "당류(g)          0.29\n",
       "나트륨(mg)       102.0\n",
       "Name: 13323, dtype: object"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"삼계탕\"].copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__6_1= g.loc[dist.idxmin()]\n",
    "df__6_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e76af2a8",
   "metadata": {},
   "source": [
    "#### **(7) 새우튀김**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "474791ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 4\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12194</th>\n",
       "      <td>새우튀김</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>145</td>\n",
       "      <td>7.1</td>\n",
       "      <td>5.52</td>\n",
       "      <td>16.54</td>\n",
       "      <td>2.22</td>\n",
       "      <td>322.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12997</th>\n",
       "      <td>새우튀김</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>145</td>\n",
       "      <td>7.1</td>\n",
       "      <td>5.58</td>\n",
       "      <td>16.52</td>\n",
       "      <td>2.21</td>\n",
       "      <td>321.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13640</th>\n",
       "      <td>새우튀김</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>145</td>\n",
       "      <td>7.1</td>\n",
       "      <td>5.58</td>\n",
       "      <td>16.52</td>\n",
       "      <td>2.21</td>\n",
       "      <td>321.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14367</th>\n",
       "      <td>새우튀김</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>145</td>\n",
       "      <td>7.1</td>\n",
       "      <td>5.52</td>\n",
       "      <td>16.54</td>\n",
       "      <td>2.22</td>\n",
       "      <td>322.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "12194  새우튀김    튀김류        145     7.1   5.52    16.54   2.22    322.0\n",
       "12997  새우튀김    튀김류        145     7.1   5.58    16.52   2.21    321.0\n",
       "13640  새우튀김    튀김류        145     7.1   5.58    16.52   2.21    321.0\n",
       "14367  새우튀김    튀김류        145     7.1   5.52    16.54   2.22    322.0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"새우튀김\"\n",
    "df__7 = df[df[\"식품명\"].astype(str).str.strip() == \"새우튀김\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__7))\n",
    "df__7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "83e04228",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명           새우튀김\n",
       "식품대분류명         튀김류\n",
       "에너지(kcal)      145\n",
       "단백질(g)         7.1\n",
       "지방(g)         5.52\n",
       "탄수화물(g)      16.54\n",
       "당류(g)         2.22\n",
       "나트륨(mg)      322.0\n",
       "Name: 12194, dtype: object"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"새우튀김\"].copy()\n",
    "\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__7_1= g.loc[dist.idxmin()]\n",
    "df__7_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b13814dd",
   "metadata": {},
   "source": [
    "#### **(8) 수제비**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ad789c49",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'식품명': {109: '수제비'},\n",
       " '식품대분류명': {109: '면 및 만두류'},\n",
       " '에너지(kcal)': {109: 58},\n",
       " '단백질(g)': {109: 2.31},\n",
       " '지방(g)': {109: 0.52},\n",
       " '탄수화물(g)': {109: 11.08},\n",
       " '당류(g)': {109: 0.0},\n",
       " '나트륨(mg)': {109: 142.0}}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"수제비\"\n",
    "df__8 = df[df[\"식품명\"].astype(str).str.strip() == \"수제비\"].copy()\n",
    "\n",
    "df__8 = df__8.to_dict()\n",
    "df__8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a5002721",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명              수제비\n",
       "식품대분류명       면 및 만두류\n",
       "에너지(kcal)         58\n",
       "단백질(g)          2.31\n",
       "지방(g)           0.52\n",
       "탄수화물(g)        11.08\n",
       "당류(g)            0.0\n",
       "나트륨(mg)        142.0\n",
       "Name: 109, dtype: object"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"수제비\"].copy()\n",
    "\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__8_1= g.loc[dist.idxmin()]\n",
    "df__8_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "233bb468",
   "metadata": {},
   "source": [
    "#### **(9) 순대**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "aa5e46b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>순대</td>\n",
       "      <td>찜류</td>\n",
       "      <td>187</td>\n",
       "      <td>2.75</td>\n",
       "      <td>3.64</td>\n",
       "      <td>35.73</td>\n",
       "      <td>1.39</td>\n",
       "      <td>604.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11169</th>\n",
       "      <td>순대</td>\n",
       "      <td>찜류</td>\n",
       "      <td>181</td>\n",
       "      <td>6.52</td>\n",
       "      <td>8.55</td>\n",
       "      <td>19.45</td>\n",
       "      <td>1.17</td>\n",
       "      <td>340.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12758</th>\n",
       "      <td>순대</td>\n",
       "      <td>찜류</td>\n",
       "      <td>165</td>\n",
       "      <td>5.50</td>\n",
       "      <td>6.55</td>\n",
       "      <td>20.61</td>\n",
       "      <td>0.76</td>\n",
       "      <td>271.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13430</th>\n",
       "      <td>순대</td>\n",
       "      <td>찜류</td>\n",
       "      <td>165</td>\n",
       "      <td>5.50</td>\n",
       "      <td>6.55</td>\n",
       "      <td>20.61</td>\n",
       "      <td>0.76</td>\n",
       "      <td>271.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14116</th>\n",
       "      <td>순대</td>\n",
       "      <td>찜류</td>\n",
       "      <td>252</td>\n",
       "      <td>9.60</td>\n",
       "      <td>8.91</td>\n",
       "      <td>32.11</td>\n",
       "      <td>1.12</td>\n",
       "      <td>1180.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "231    순대     찜류        187    2.75   3.64    35.73   1.39    604.0\n",
       "11169  순대     찜류        181    6.52   8.55    19.45   1.17    340.0\n",
       "12758  순대     찜류        165    5.50   6.55    20.61   0.76    271.0\n",
       "13430  순대     찜류        165    5.50   6.55    20.61   0.76    271.0\n",
       "14116  순대     찜류        252    9.60   8.91    32.11   1.12   1180.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"순대\"\n",
    "df__9 = df[df[\"식품명\"].astype(str).str.strip() == \"순대\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__9))\n",
    "df__9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6b1f9949",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명             순대\n",
       "식품대분류명          찜류\n",
       "에너지(kcal)      181\n",
       "단백질(g)        6.52\n",
       "지방(g)         8.55\n",
       "탄수화물(g)      19.45\n",
       "당류(g)         1.17\n",
       "나트륨(mg)      340.0\n",
       "Name: 11169, dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"순대\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__9_1= g.loc[dist.idxmin()]\n",
    "df__9_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc34273f",
   "metadata": {},
   "source": [
    "#### **(10) 족발**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1344474a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>족발</td>\n",
       "      <td>찜류</td>\n",
       "      <td>233</td>\n",
       "      <td>26.04</td>\n",
       "      <td>13.91</td>\n",
       "      <td>0.93</td>\n",
       "      <td>0.00</td>\n",
       "      <td>345.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11174</th>\n",
       "      <td>족발</td>\n",
       "      <td>찜류</td>\n",
       "      <td>220</td>\n",
       "      <td>28.91</td>\n",
       "      <td>11.65</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.28</td>\n",
       "      <td>332.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "235    족발     찜류        233   26.04  13.91     0.93   0.00    345.0\n",
       "11174  족발     찜류        220   28.91  11.65     0.00   0.28    332.0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"족발\"\n",
    "df__10 = df[df[\"식품명\"].astype(str).str.strip() == \"족발\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__10))\n",
    "df__10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9e6ae50d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명             족발\n",
       "식품대분류명          찜류\n",
       "에너지(kcal)      233\n",
       "단백질(g)       26.04\n",
       "지방(g)        13.91\n",
       "탄수화물(g)       0.93\n",
       "당류(g)          0.0\n",
       "나트륨(mg)      345.0\n",
       "Name: 235, dtype: object"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"족발\"].copy()\n",
    "\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__10_1= g.loc[dist.idxmin()]\n",
    "df__10_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af40f63d",
   "metadata": {},
   "source": [
    "#### **(11) 짜장면**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "58eaa93f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 4\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11613</th>\n",
       "      <td>짜장면</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>153</td>\n",
       "      <td>5.3</td>\n",
       "      <td>2.57</td>\n",
       "      <td>29.14</td>\n",
       "      <td>2.90</td>\n",
       "      <td>411.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12563</th>\n",
       "      <td>짜장면</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>98</td>\n",
       "      <td>3.8</td>\n",
       "      <td>1.20</td>\n",
       "      <td>19.22</td>\n",
       "      <td>1.47</td>\n",
       "      <td>277.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13280</th>\n",
       "      <td>짜장면</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>105</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.25</td>\n",
       "      <td>20.90</td>\n",
       "      <td>1.51</td>\n",
       "      <td>295.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13919</th>\n",
       "      <td>짜장면</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>117</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.06</td>\n",
       "      <td>22.06</td>\n",
       "      <td>1.90</td>\n",
       "      <td>371.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       식품명   식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "11613  짜장면  면 및 만두류        153     5.3   2.57    29.14   2.90    411.0\n",
       "12563  짜장면  면 및 만두류         98     3.8   1.20    19.22   1.47    277.0\n",
       "13280  짜장면  면 및 만두류        105     4.0   1.25    20.90   1.51    295.0\n",
       "13919  짜장면  면 및 만두류        117     4.0   2.06    22.06   1.90    371.0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"짜장면\"\n",
    "df__11 = df[df[\"식품명\"].astype(str).str.strip() == \"짜장면\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__11))\n",
    "df__11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e2f89c21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명              짜장면\n",
       "식품대분류명       면 및 만두류\n",
       "에너지(kcal)        105\n",
       "단백질(g)           4.0\n",
       "지방(g)           1.25\n",
       "탄수화물(g)         20.9\n",
       "당류(g)           1.51\n",
       "나트륨(mg)        295.0\n",
       "Name: 13280, dtype: object"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"짜장면\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__11_1= g.loc[dist.idxmin()]\n",
    "df__11_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9789ee60",
   "metadata": {},
   "source": [
    "#### **(12) 짬뽕**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "171c5cba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>짬뽕</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>58</td>\n",
       "      <td>2.79</td>\n",
       "      <td>1.54</td>\n",
       "      <td>8.26</td>\n",
       "      <td>1.57</td>\n",
       "      <td>181.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11587</th>\n",
       "      <td>짬뽕</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>86</td>\n",
       "      <td>4.30</td>\n",
       "      <td>1.29</td>\n",
       "      <td>14.92</td>\n",
       "      <td>0.96</td>\n",
       "      <td>195.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12544</th>\n",
       "      <td>짬뽕</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>74</td>\n",
       "      <td>2.70</td>\n",
       "      <td>1.31</td>\n",
       "      <td>12.29</td>\n",
       "      <td>0.43</td>\n",
       "      <td>119.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13264</th>\n",
       "      <td>짬뽕</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>73</td>\n",
       "      <td>2.80</td>\n",
       "      <td>1.27</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.46</td>\n",
       "      <td>125.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13894</th>\n",
       "      <td>짬뽕</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>61</td>\n",
       "      <td>2.80</td>\n",
       "      <td>1.08</td>\n",
       "      <td>9.65</td>\n",
       "      <td>0.47</td>\n",
       "      <td>125.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      식품명   식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "115    짬뽕  면 및 만두류         58    2.79   1.54     8.26   1.57    181.0\n",
       "11587  짬뽕  면 및 만두류         86    4.30   1.29    14.92   0.96    195.0\n",
       "12544  짬뽕  면 및 만두류         74    2.70   1.31    12.29   0.43    119.0\n",
       "13264  짬뽕  면 및 만두류         73    2.80   1.27    11.93   0.46    125.0\n",
       "13894  짬뽕  면 및 만두류         61    2.80   1.08     9.65   0.47    125.0"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"짬뽕\"\n",
    "df__12 = df[df[\"식품명\"].astype(str).str.strip() == \"짬뽕\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__12))\n",
    "df__12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "041f20fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명               짬뽕\n",
       "식품대분류명       면 및 만두류\n",
       "에너지(kcal)         73\n",
       "단백질(g)           2.8\n",
       "지방(g)           1.27\n",
       "탄수화물(g)        11.93\n",
       "당류(g)           0.46\n",
       "나트륨(mg)        125.0\n",
       "Name: 13264, dtype: object"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"짬뽕\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__12_1= g.loc[dist.idxmin()]\n",
    "df__12_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d93d0103",
   "metadata": {},
   "source": [
    "#### **(13) 칼국수**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "01ae3f47",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>칼국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>77</td>\n",
       "      <td>3.3</td>\n",
       "      <td>0.49</td>\n",
       "      <td>14.90</td>\n",
       "      <td>0.00</td>\n",
       "      <td>220.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11589</th>\n",
       "      <td>칼국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>97</td>\n",
       "      <td>2.7</td>\n",
       "      <td>0.29</td>\n",
       "      <td>20.03</td>\n",
       "      <td>0.22</td>\n",
       "      <td>184.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12546</th>\n",
       "      <td>칼국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>85</td>\n",
       "      <td>2.4</td>\n",
       "      <td>0.26</td>\n",
       "      <td>17.53</td>\n",
       "      <td>0.20</td>\n",
       "      <td>144.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13266</th>\n",
       "      <td>칼국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>97</td>\n",
       "      <td>2.7</td>\n",
       "      <td>0.29</td>\n",
       "      <td>20.03</td>\n",
       "      <td>0.22</td>\n",
       "      <td>184.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13896</th>\n",
       "      <td>칼국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>97</td>\n",
       "      <td>2.7</td>\n",
       "      <td>0.29</td>\n",
       "      <td>20.03</td>\n",
       "      <td>0.22</td>\n",
       "      <td>184.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       식품명   식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "117    칼국수  면 및 만두류         77     3.3   0.49    14.90   0.00    220.0\n",
       "11589  칼국수  면 및 만두류         97     2.7   0.29    20.03   0.22    184.0\n",
       "12546  칼국수  면 및 만두류         85     2.4   0.26    17.53   0.20    144.0\n",
       "13266  칼국수  면 및 만두류         97     2.7   0.29    20.03   0.22    184.0\n",
       "13896  칼국수  면 및 만두류         97     2.7   0.29    20.03   0.22    184.0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"칼국수\"\n",
    "df__13 = df[df[\"식품명\"].astype(str).str.strip() == \"칼국수\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__13))\n",
    "df__13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "bddb9780",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명              칼국수\n",
       "식품대분류명       면 및 만두류\n",
       "에너지(kcal)         97\n",
       "단백질(g)           2.7\n",
       "지방(g)           0.29\n",
       "탄수화물(g)        20.03\n",
       "당류(g)           0.22\n",
       "나트륨(mg)        184.0\n",
       "Name: 11589, dtype: object"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"칼국수\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__13_1= g.loc[dist.idxmin()]\n",
    "df__13_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cae5a7e",
   "metadata": {},
   "source": [
    "#### **(14) 콩국수**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7a5f19bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>119</th>\n",
       "      <td>콩국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>81</td>\n",
       "      <td>3.90</td>\n",
       "      <td>3.35</td>\n",
       "      <td>8.92</td>\n",
       "      <td>0.24</td>\n",
       "      <td>67.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11010</th>\n",
       "      <td>콩국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>100</td>\n",
       "      <td>4.61</td>\n",
       "      <td>3.83</td>\n",
       "      <td>11.69</td>\n",
       "      <td>0.76</td>\n",
       "      <td>97.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11594</th>\n",
       "      <td>콩국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>70</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1.34</td>\n",
       "      <td>10.19</td>\n",
       "      <td>0.75</td>\n",
       "      <td>159.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12549</th>\n",
       "      <td>콩국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>129</td>\n",
       "      <td>6.00</td>\n",
       "      <td>2.21</td>\n",
       "      <td>20.48</td>\n",
       "      <td>1.02</td>\n",
       "      <td>388.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13901</th>\n",
       "      <td>콩국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>113</td>\n",
       "      <td>5.30</td>\n",
       "      <td>1.94</td>\n",
       "      <td>17.94</td>\n",
       "      <td>0.87</td>\n",
       "      <td>335.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       식품명   식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "119    콩국수  면 및 만두류         81    3.90   3.35     8.92   0.24     67.0\n",
       "11010  콩국수  면 및 만두류        100    4.61   3.83    11.69   0.76     97.0\n",
       "11594  콩국수  면 및 만두류         70    4.00   1.34    10.19   0.75    159.0\n",
       "12549  콩국수  면 및 만두류        129    6.00   2.21    20.48   1.02    388.0\n",
       "13901  콩국수  면 및 만두류        113    5.30   1.94    17.94   0.87    335.0"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"콩국수\"\n",
    "df__14 = df[df[\"식품명\"].astype(str).str.strip() == \"콩국수\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__14))\n",
    "df__14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e771ed17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명              콩국수\n",
       "식품대분류명       면 및 만두류\n",
       "에너지(kcal)         70\n",
       "단백질(g)           4.0\n",
       "지방(g)           1.34\n",
       "탄수화물(g)        10.19\n",
       "당류(g)           0.75\n",
       "나트륨(mg)        159.0\n",
       "Name: 11594, dtype: object"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"콩국수\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__14_1= g.loc[dist.idxmin()]\n",
    "df__14_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e249a54d",
   "metadata": {},
   "source": [
    "#### **(15) 파전**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0b72a05b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 3\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11240</th>\n",
       "      <td>파전</td>\n",
       "      <td>전·적 및 부침류</td>\n",
       "      <td>195</td>\n",
       "      <td>4.56</td>\n",
       "      <td>9.35</td>\n",
       "      <td>23.20</td>\n",
       "      <td>0.52</td>\n",
       "      <td>231.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11988</th>\n",
       "      <td>파전</td>\n",
       "      <td>전·적 및 부침류</td>\n",
       "      <td>101</td>\n",
       "      <td>3.00</td>\n",
       "      <td>3.04</td>\n",
       "      <td>14.47</td>\n",
       "      <td>0.15</td>\n",
       "      <td>162.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14198</th>\n",
       "      <td>파전</td>\n",
       "      <td>전·적 및 부침류</td>\n",
       "      <td>216</td>\n",
       "      <td>6.20</td>\n",
       "      <td>11.26</td>\n",
       "      <td>20.92</td>\n",
       "      <td>0.52</td>\n",
       "      <td>505.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      식품명     식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "11240  파전  전·적 및 부침류        195    4.56   9.35    23.20   0.52    231.0\n",
       "11988  파전  전·적 및 부침류        101    3.00   3.04    14.47   0.15    162.0\n",
       "14198  파전  전·적 및 부침류        216    6.20  11.26    20.92   0.52    505.0"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"파전\"\n",
    "df__15 = df[df[\"식품명\"].astype(str).str.strip() == \"파전\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__15))\n",
    "df__15"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "728d1f3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명                 파전\n",
       "식품대분류명       전·적 및 부침류\n",
       "에너지(kcal)          195\n",
       "단백질(g)            4.56\n",
       "지방(g)             9.35\n",
       "탄수화물(g)           23.2\n",
       "당류(g)             0.52\n",
       "나트륨(mg)          231.0\n",
       "Name: 11240, dtype: object"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"파전\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__15_1= g.loc[dist.idxmin()]\n",
    "df__15_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d07dd60",
   "metadata": {},
   "source": [
    "#### **(16) 고기만두**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6abdc2a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 4\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11596</th>\n",
       "      <td>고기만두</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>105</td>\n",
       "      <td>6.6</td>\n",
       "      <td>2.51</td>\n",
       "      <td>13.15</td>\n",
       "      <td>0.27</td>\n",
       "      <td>322.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12550</th>\n",
       "      <td>고기만두</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>96</td>\n",
       "      <td>5.4</td>\n",
       "      <td>1.81</td>\n",
       "      <td>13.59</td>\n",
       "      <td>0.04</td>\n",
       "      <td>162.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13268</th>\n",
       "      <td>고기만두</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>99</td>\n",
       "      <td>6.1</td>\n",
       "      <td>1.63</td>\n",
       "      <td>14.13</td>\n",
       "      <td>0.06</td>\n",
       "      <td>148.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13902</th>\n",
       "      <td>고기만두</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>114</td>\n",
       "      <td>5.9</td>\n",
       "      <td>2.16</td>\n",
       "      <td>16.96</td>\n",
       "      <td>0.16</td>\n",
       "      <td>173.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        식품명   식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "11596  고기만두  면 및 만두류        105     6.6   2.51    13.15   0.27    322.0\n",
       "12550  고기만두  면 및 만두류         96     5.4   1.81    13.59   0.04    162.0\n",
       "13268  고기만두  면 및 만두류         99     6.1   1.63    14.13   0.06    148.0\n",
       "13902  고기만두  면 및 만두류        114     5.9   2.16    16.96   0.16    173.0"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"고기만두\"\n",
    "df__16 = df[df[\"식품명\"].astype(str).str.strip() == \"고기만두\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__16))\n",
    "df__16"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "4d8123ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명             고기만두\n",
       "식품대분류명       면 및 만두류\n",
       "에너지(kcal)         96\n",
       "단백질(g)           5.4\n",
       "지방(g)           1.81\n",
       "탄수화물(g)        13.59\n",
       "당류(g)           0.04\n",
       "나트륨(mg)        162.0\n",
       "Name: 12550, dtype: object"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"고기만두\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__16_1= g.loc[dist.idxmin()]\n",
    "df__16_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dad15aa",
   "metadata": {},
   "source": [
    "#### **(17) 육회**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "2a7b6962",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>481</th>\n",
       "      <td>육회</td>\n",
       "      <td>수·조·어·육류</td>\n",
       "      <td>130</td>\n",
       "      <td>9.93</td>\n",
       "      <td>6.43</td>\n",
       "      <td>8.12</td>\n",
       "      <td>5.29</td>\n",
       "      <td>418.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12450</th>\n",
       "      <td>육회</td>\n",
       "      <td>수·조·어·육류</td>\n",
       "      <td>158</td>\n",
       "      <td>9.50</td>\n",
       "      <td>7.65</td>\n",
       "      <td>13.17</td>\n",
       "      <td>9.79</td>\n",
       "      <td>244.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      식품명    식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "481    육회  수·조·어·육류        130    9.93   6.43     8.12   5.29    418.0\n",
       "12450  육회  수·조·어·육류        158    9.50   7.65    13.17   9.79    244.0"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정확 일치: 식품명 == \"육회\"\n",
    "df__17 = df[df[\"식품명\"].astype(str).str.strip() == \"육회\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__17))\n",
    "df__17"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "bc63691c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명                육회\n",
       "식품대분류명       수·조·어·육류\n",
       "에너지(kcal)         130\n",
       "단백질(g)           9.93\n",
       "지방(g)            6.43\n",
       "탄수화물(g)          8.12\n",
       "당류(g)            5.29\n",
       "나트륨(mg)         418.0\n",
       "Name: 481, dtype: object"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df[df[\"식품명\"].astype(str).str.strip() == \"육회\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__17_1= g.loc[dist.idxmin()]\n",
    "df__17_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f210b80d",
   "metadata": {},
   "source": [
    "#### **미매칭된 음식-('과메기', '만두', '보쌈', '양념치킨', '육회', '피자', '후라이드치킨')**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "aba8d5ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "미매칭(정확 일치 없음): ['과메기', '보쌈', '양념치킨', '피자', '후라이드치킨']\n"
     ]
    }
   ],
   "source": [
    "# 4) 어떤 클래스가 하나도 안 잡혔는지\n",
    "hit_names = set(df_exact[\"식품명\"].astype(str).str.strip().unique())\n",
    "missed = sorted(target_set - hit_names)\n",
    "print(\"\\n미매칭(정확 일치 없음):\", missed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5aab3c93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  \\\n",
      "267                    치킨데리야끼    구이류        208   16.54   9.01    15.21   \n",
      "483         리소토/리조또_치킨 크림 리조또     밥류        185    6.22    NaN      NaN   \n",
      "6363        닭다리튀김_황금올리브치킨 닭다리    튀김류        244   20.78    NaN      NaN   \n",
      "6364   닭다리튀김_황올 반+양념 반 닭다리 치킨    튀김류        241   16.32    NaN      NaN   \n",
      "6366       닭튀김_No.1포테이토닥토닭 치킨    튀김류        286   16.98    NaN      NaN   \n",
      "6367                닭튀김_간장 치킨    튀김류        327   27.48    NaN    12.38   \n",
      "6368                닭튀김_간장 치킨    튀김류        233   23.00    NaN      NaN   \n",
      "6369                닭튀김_간장 치킨    튀김류        275   22.15    NaN      NaN   \n",
      "6370              닭튀김_갈비천왕 치킨    튀김류        194   26.80    NaN     4.19   \n",
      "6371                닭튀김_강정 치킨    튀김류        275   18.63    NaN      NaN   \n",
      "6372             닭튀김_고추바사삭 치킨    튀김류        234   23.71    NaN     8.35   \n",
      "6373              닭튀김_교촌순살 치킨    튀김류        395   28.74    NaN      NaN   \n",
      "6374          닭튀김_교촌순살 치킨 (S)    튀김류        395   28.74    NaN      NaN   \n",
      "6375            닭튀김_교촌오리지날 치킨    튀김류        314   28.68    NaN      NaN   \n",
      "6376               닭튀김_교촌윙 치킨    튀김류        377   29.14    NaN      NaN   \n",
      "6377           닭튀김_교촌윙 치킨 (S)    튀김류        377   29.14    NaN      NaN   \n",
      "6378              닭튀김_교촌콤보 치킨    튀김류        319   28.37    NaN      NaN   \n",
      "6379          닭튀김_교촌콤보 치킨 (S)    튀김류        319   28.37    NaN      NaN   \n",
      "6380          닭튀김_극장판치킨 고추치즈편    튀김류        398   27.93    NaN      NaN   \n",
      "6381             닭튀김_극한왕갈비 치킨    튀김류        322   15.80    NaN      NaN   \n",
      "6382              닭튀김_깐풍요리 치킨    튀김류        287   22.61    NaN    14.38   \n",
      "6383                닭튀김_꿀잼 치킨    튀김류        286   21.60    NaN      NaN   \n",
      "6384              닭튀김_꿔바로우 치킨    튀김류        257   19.08    NaN      NaN   \n",
      "6385             닭튀김_날다닭간장 치킨    튀김류        235   24.00    NaN      NaN   \n",
      "6386             닭튀김_날다닭마늘 치킨    튀김류        233   29.00    NaN      NaN   \n",
      "6387               닭튀김_날다닭 치킨    튀김류        271   20.00    NaN      NaN   \n",
      "6388               닭튀김_눈맞은 치킨    튀김류        292   22.16    NaN      NaN   \n",
      "6389              닭튀김_단짠갈릭 치킨    튀김류        309   15.79    NaN      NaN   \n",
      "6390        닭튀김_두마리같은한마리치킨주세요    튀김류        282   23.88    NaN      NaN   \n",
      "6391              닭튀김_땡초불꽃 치킨    튀김류        243   20.70    NaN    15.15   \n",
      "6392                닭튀김_땡초 치킨    튀김류        266   21.84    NaN    12.15   \n",
      "6393              닭튀김_레드순살 치킨    튀김류        381   28.83    NaN      NaN   \n",
      "6394          닭튀김_레드순살 치킨 (S)    튀김류        381   28.83    NaN      NaN   \n",
      "6395            닭튀김_레드오리지날 치킨    튀김류        332   26.53    NaN      NaN   \n",
      "6396               닭튀김_레드윙 치킨    튀김류        355   28.87    NaN      NaN   \n",
      "6397           닭튀김_레드윙 치킨 (S)    튀김류        355   28.87    NaN      NaN   \n",
      "6398              닭튀김_레드콤보 치킨    튀김류        303   26.29    NaN      NaN   \n",
      "6399          닭튀김_레드콤보 치킨 (S)    튀김류        303   26.29    NaN      NaN   \n",
      "6401            닭튀김_레블반반콤보 치킨    튀김류        318   24.29    NaN      NaN   \n",
      "6402            닭튀김_레허반반순살 치킨    튀김류        364   23.95    NaN      NaN   \n",
      "6403           닭튀김_리얼 치킨 꿔바로우    튀김류        198   10.84    NaN    24.83   \n",
      "6404            닭튀김_리얼후라이드 치킨    튀김류        268   22.91    NaN      NaN   \n",
      "6405            닭튀김_마늘스태미나 치킨    튀김류        260   19.04    NaN      NaN   \n",
      "6406             닭튀김_마늘알마니 치킨    튀김류        233   17.96    NaN    14.50   \n",
      "6407                닭튀김_마늘 치킨    튀김류        240   27.00    NaN      NaN   \n",
      "6408               닭튀김_매달구 치킨    튀김류        250   23.92    NaN      NaN   \n",
      "6409             닭튀김_매운 간장 치킨    튀김류        358   26.99    NaN    13.37   \n",
      "6410             닭튀김_매운 양념 치킨    튀김류        278   23.64    NaN    15.49   \n",
      "6411              닭튀김_매운양념 치킨    튀김류        297   16.75    NaN      NaN   \n",
      "6412          닭튀김_매운양념 치킨 반마리    튀김류        130    8.38    NaN      NaN   \n",
      "6413              닭튀김_맵소이닭 치킨    튀김류        232   24.00    NaN      NaN   \n",
      "6414          닭튀김_맵슐랭 치킨 오리지널    튀김류        259   24.00    NaN      NaN   \n",
      "6415             닭튀김_모두의마요 치킨    튀김류        256   25.43    NaN     9.65   \n",
      "6416              닭튀김_바삭갈릭 치킨    튀김류        311   18.29    NaN      NaN   \n",
      "6417        닭튀김_바삭담백한 후라이드 치킨    튀김류        293   25.30    NaN      NaN   \n",
      "6418              닭튀김_반반순살 치킨    튀김류        396   26.00    NaN      NaN   \n",
      "6419            닭튀김_반반오리지날 치킨    튀김류        323   27.60    NaN      NaN   \n",
      "6420               닭튀김_반반윙 치킨    튀김류        366   29.00    NaN      NaN   \n",
      "6421              닭튀김_반반콤보 치킨    튀김류        311   27.33    NaN      NaN   \n",
      "6422              닭튀김_볼케이노 치킨    튀김류        196   24.00    NaN     6.00   \n",
      "6423                닭튀김_불금 치킨    튀김류        228   22.94    NaN     9.18   \n",
      "6424               닭튀김_불짬뽕 치킨    튀김류        280   18.11    NaN    19.11   \n",
      "6425                닭튀김_불패 치킨    튀김류        250   23.00    NaN      NaN   \n",
      "6426          닭튀김_블랙시크릿 순살 치킨    튀김류        362   21.13    NaN      NaN   \n",
      "6427      닭튀김_블랙시크릿 순살 치킨 (S)    튀김류        362   21.13    NaN      NaN   \n",
      "6428        닭튀김_블랙시크릿 오리지날 치킨    튀김류        313   22.47    NaN      NaN   \n",
      "6429          닭튀김_블랙시크릿 콤보 치킨    튀김류        332   22.30    NaN      NaN   \n",
      "6430      닭튀김_블랙시크릿 콤보 치킨 (S)    튀김류        332   22.30    NaN      NaN   \n",
      "6431     닭튀김_블랙페퍼 반+레드착착 반 치킨    튀김류        306   20.88    NaN      NaN   \n",
      "6432            닭튀김_살살후라이드 치킨    튀김류        325   18.88    NaN      NaN   \n",
      "6433         닭튀김_살살후라이드 미니 치킨    튀김류        325   18.88    NaN      NaN   \n",
      "6434              닭튀김_생그라나 치킨    튀김류        265   24.00    NaN      NaN   \n",
      "6435               닭튀김_소보로 치킨    튀김류        282   18.00    NaN      NaN   \n",
      "6436             닭튀김_소이갈릭스 치킨    튀김류        309   21.44    NaN      NaN   \n",
      "6437     닭튀김_순살 뿌리고 치킨 매콤달콤한맛    튀김류        315   20.59    NaN    17.08   \n",
      "6438       닭튀김_순살 뿌리고 치킨 오리지날    튀김류        258   21.19    NaN    12.92   \n",
      "6439               닭튀김_쉑쉑양꼬치킨    튀김류        300   23.96    NaN      NaN   \n",
      "6440              닭튀김_스리라차 치킨    튀김류        239   19.00    NaN      NaN   \n",
      "6441               닭튀김_스모크 치킨    튀김류        271   22.13    NaN      NaN   \n",
      "6442           닭튀김_스모크 치킨 반마리    튀김류        136   11.07    NaN      NaN   \n",
      "6443             닭튀김_스윗츠갈릭 치킨    튀김류        279   20.76    NaN    19.74   \n",
      "6444         닭튀김_시그니처순살 치킨 세트    튀김류        374   25.54    NaN      NaN   \n",
      "6445          닭튀김_아빠의제주깜슐랭 치킨    튀김류        273   18.67    NaN      NaN   \n",
      "6446                닭튀김_양념 치킨    튀김류        248   19.44    NaN    18.70   \n",
      "6447                닭튀김_양념 치킨    튀김류        248   21.04    NaN    14.62   \n",
      "6448                닭튀김_양념 치킨    튀김류        284   23.00    NaN      NaN   \n",
      "6449             닭튀김_양념히어로 치킨    튀김류        221   21.56    NaN    13.90   \n",
      "6450           닭튀김_오리지날 양념 치킨    튀김류        270   16.34    NaN      NaN   \n",
      "6451       닭튀김_오리지날 양념 치킨 반마리    튀김류        270   16.34    NaN      NaN   \n",
      "6452          닭튀김_오븐 바사삭 윙 치킨    튀김류        230   26.29    NaN     7.14   \n",
      "6453            닭튀김_오븐 바사삭 치킨    튀김류        230   26.29    NaN     7.14   \n",
      "6454        닭튀김_요거치즈닝치킨 안심 순살    튀김류        206   16.76    NaN    18.76   \n",
      "6455              닭튀김_윙+다리 치킨    튀김류        282   23.59    NaN     9.88   \n",
      "6456             닭튀김_윙봉스간장 치킨    튀김류        266   23.00    NaN      NaN   \n",
      "6457             닭튀김_윙봉스마늘 치킨    튀김류        284   23.00    NaN      NaN   \n",
      "6458               닭튀김_윙봉스 치킨    튀김류        289   22.00    NaN      NaN   \n",
      "6459         닭튀김_자메이카 소떡만나 치킨    튀김류        287   17.43    NaN      NaN   \n",
      "6461      닭튀김_자메이카 소떡만나 치킨 콤보    튀김류        272   16.23    NaN      NaN   \n",
      "6462              닭튀김_조선레드 치킨    튀김류        270   23.41    NaN      NaN   \n",
      "6463              닭튀김_착착갈릭 치킨    튀김류        322   16.23    NaN      NaN   \n",
      "6464            닭튀김_청양고추마요 치킨    튀김류        314   16.70    NaN    16.00   \n",
      "6465               닭튀김_치요링 치킨    튀김류        257   22.00    NaN      NaN   \n",
      "6466             닭튀김_치즈바사삭 치킨    튀김류        228   24.47    NaN     9.82   \n",
      "6467         닭튀김_크런치 순살크래커 치킨    튀김류        263   18.49    NaN      NaN   \n",
      "6469             닭튀김_크리미양파 치킨    튀김류        236   20.00    NaN      NaN   \n",
      "6470            닭튀김_크리미어니언 치킨    튀김류        261   12.79    NaN      NaN   \n",
      "6471     닭튀김_크리스피 반+레드착착 반 치킨    튀김류        315   20.21    NaN      NaN   \n",
      "6472     닭튀김_크리스피 반+블랙페퍼 반 치킨    튀김류        314   20.18    NaN      NaN   \n",
      "6473         닭튀김_크리스피 후라이드 치킨    튀김류        314   22.55    NaN      NaN   \n",
      "6474              닭튀김_타코마요 치킨    튀김류        290   20.08    NaN    11.08   \n",
      "6475           닭튀김_티키타코 순살 치킨    튀김류        303   17.00    NaN      NaN   \n",
      "6476                닭튀김_파닭 치킨    튀김류        224   20.00    NaN      NaN   \n",
      "6477              닭튀김_파더’s 치킨    튀김류        220   22.52    NaN      NaN   \n",
      "6478            닭튀김_파채소이살살 치킨    튀김류        204    8.53    NaN      NaN   \n",
      "6479            닭튀김_프라임핫쵸킹 치킨    튀김류        278   18.95    NaN      NaN   \n",
      "6480               닭튀김_핫쵸킹 치킨    튀김류        287   21.16    NaN      NaN   \n",
      "6481       닭튀김_핫황금올리브 치킨 크리스피    튀김류        323   19.50    NaN      NaN   \n",
      "6482   닭튀김_핫황금올리브 치킨 크리스피 반마리    튀김류        323   19.50    NaN      NaN   \n",
      "6483             닭튀김_핫후라이드 치킨    튀김류        263   23.00    NaN      NaN   \n",
      "6484              닭튀김_허니멜로 치킨    튀김류        216   26.00    NaN     4.34   \n",
      "6485              닭튀김_허니순살 치킨    튀김류        346   19.08    NaN      NaN   \n",
      "6486          닭튀김_허니순살 치킨 (S)    튀김류        346   19.08    NaN      NaN   \n",
      "6487            닭튀김_허니오리지날 치킨    튀김류        329   21.24    NaN      NaN   \n",
      "6488             닭튀김_허니점보윙 치킨    튀김류        356   23.65    NaN      NaN   \n",
      "6489              닭튀김_허니콤보 치킨    튀김류        319   18.59    NaN      NaN   \n",
      "6491             닭튀김_황금올리브 치킨    튀김류        254   18.77    NaN      NaN   \n",
      "6492         닭튀김_황금올리브 치킨 반마리    튀김류        254   18.77    NaN      NaN   \n",
      "6493        닭튀김_황금올리브 치킨 레드착착    튀김류        308   20.91    NaN      NaN   \n",
      "6494    닭튀김_황금올리브 치킨 레드착착 반마리    튀김류        154   10.46    NaN      NaN   \n",
      "6495        닭튀김_황금올리브 치킨 블랙페퍼    튀김류        304   20.85    NaN      NaN   \n",
      "6496    닭튀김_황금올리브 치킨 블랙페퍼 반마리    튀김류        304   20.85    NaN      NaN   \n",
      "6497         닭튀김_황금올리브 치킨 속안심    튀김류        269   23.94    NaN      NaN   \n",
      "6498          닭튀김_황금올리브 치킨 콤보    튀김류        288   20.94    NaN      NaN   \n",
      "6499      닭튀김_황금올리브 치킨 크런치 버터    튀김류        301   19.78    NaN      NaN   \n",
      "6500          닭튀김_황금올리브 치킨 핫윙    튀김류        313   17.09    NaN      NaN   \n",
      "6501       닭튀김_황금올리브 치킨 핫윙 냉장    튀김류        313   17.09    NaN      NaN   \n",
      "6502       닭튀김_황올 반+매운양념 반 치킨    튀김류        275   17.76    NaN      NaN   \n",
      "6503         닭튀김_황올 반+양념 반 치킨    튀김류        254   18.77    NaN      NaN   \n",
      "6504      닭튀김_황올 반+양념 반 콤보 치킨    튀김류        280   17.42    NaN      NaN   \n",
      "6505       닭튀김_황올 반+크리스피 반 치킨    튀김류        288   19.14    NaN      NaN   \n",
      "6506            닭튀김_황올한 깐풍 치킨    튀김류        257   15.71    NaN      NaN   \n",
      "6507        닭튀김_황올한 깐풍 치킨 반마리    튀김류        257   15.71    NaN      NaN   \n",
      "6508              닭튀김_후라이드 치킨    튀김류        287   28.93    NaN     8.10   \n",
      "6509              닭튀김_후라이드 치킨    튀김류        270   24.67    NaN     6.86   \n",
      "6510              닭튀김_후라이드 치킨    튀김류        282   23.00    NaN      NaN   \n",
      "11334                    치킨가스    튀김류        296   13.96  16.96    22.01   \n",
      "12796                  치킨데리야끼    구이류         87   11.20   0.70     8.74   \n",
      "13462                  치킨데리야끼    구이류        142   25.40   1.55     5.56   \n",
      "14155                  치킨데리야끼    구이류        117   16.00   0.99    10.96   \n",
      "\n",
      "       당류(g)  나트륨(mg)  \n",
      "267     0.11    267.0  \n",
      "483     1.66    217.0  \n",
      "6363    0.96    469.0  \n",
      "6364    6.07    503.0  \n",
      "6366    3.10    420.0  \n",
      "6367    2.61    348.0  \n",
      "6368    0.00    310.0  \n",
      "6369    2.06    409.0  \n",
      "6370    3.59    361.0  \n",
      "6371    3.07    285.0  \n",
      "6372    1.78    449.0  \n",
      "6373    2.25    466.0  \n",
      "6374    2.25    466.0  \n",
      "6375    1.19    319.0  \n",
      "6376    1.74    409.0  \n",
      "6377    1.74    409.0  \n",
      "6378    1.69    360.0  \n",
      "6379    1.68    360.0  \n",
      "6380    2.70    419.0  \n",
      "6381   10.50    407.0  \n",
      "6382    6.56    347.0  \n",
      "6383    6.32    347.0  \n",
      "6384    2.46    285.0  \n",
      "6385    0.00    263.0  \n",
      "6386    0.00    299.0  \n",
      "6387    0.00    261.0  \n",
      "6388    3.14    348.0  \n",
      "6389    5.40    597.0  \n",
      "6390    0.22    261.0  \n",
      "6391    7.41    482.0  \n",
      "6392    3.95    488.0  \n",
      "6393    7.53    439.0  \n",
      "6394    7.53    439.0  \n",
      "6395    4.36    309.0  \n",
      "6396    5.10    378.0  \n",
      "6397    5.10    378.0  \n",
      "6398    4.39    347.0  \n",
      "6399    4.39    347.0  \n",
      "6401    6.39    365.0  \n",
      "6402    7.20    429.0  \n",
      "6403    7.71    424.0  \n",
      "6404    0.60    399.0  \n",
      "6405    2.79    335.0  \n",
      "6406    6.48    599.0  \n",
      "6407    0.00    294.0  \n",
      "6408    2.08    644.0  \n",
      "6409    2.45    441.0  \n",
      "6410    5.12    311.0  \n",
      "6411    3.82    532.0  \n",
      "6412    0.91    266.0  \n",
      "6413    1.00    303.0  \n",
      "6414    2.00    288.0  \n",
      "6415    1.91    285.0  \n",
      "6416    2.38    520.0  \n",
      "6417    0.24    235.0  \n",
      "6418    4.00    462.0  \n",
      "6419    2.77    314.0  \n",
      "6420    3.42    394.0  \n",
      "6421    3.04    354.0  \n",
      "6422    4.82    384.0  \n",
      "6423    5.48    527.0  \n",
      "6424    4.22    464.0  \n",
      "6425    1.70    285.0  \n",
      "6426    9.79    395.0  \n",
      "6427    9.79    395.0  \n",
      "6428    7.70    354.0  \n",
      "6429    8.40    382.0  \n",
      "6430    8.40    382.0  \n",
      "6431    0.80    482.0  \n",
      "6432    1.02    468.0  \n",
      "6433    1.02    468.0  \n",
      "6434    1.00    270.0  \n",
      "6435    2.00    430.0  \n",
      "6436    2.32    529.0  \n",
      "6437    2.93    389.0  \n",
      "6438    2.50    329.0  \n",
      "6439    1.06    499.0  \n",
      "6440    1.60    245.0  \n",
      "6441    0.00    502.0  \n",
      "6442    0.00    251.0  \n",
      "6443    8.00    431.0  \n",
      "6444    5.55    442.0  \n",
      "6445   15.03    430.0  \n",
      "6446    7.78    407.0  \n",
      "6447    3.26    405.0  \n",
      "6448    3.00    310.0  \n",
      "6449    7.71    448.0  \n",
      "6450    6.82    528.0  \n",
      "6451    6.82    528.0  \n",
      "6452    2.08    674.0  \n",
      "6453    2.09    674.0  \n",
      "6454    1.35    650.0  \n",
      "6455    2.37    357.0  \n",
      "6456    0.00    319.0  \n",
      "6457    0.00    339.0  \n",
      "6458    0.00    258.0  \n",
      "6459    4.81    416.0  \n",
      "6461    5.08    346.0  \n",
      "6462    4.89    403.0  \n",
      "6463    5.12    559.0  \n",
      "6464    2.50    449.0  \n",
      "6465    0.40    291.0  \n",
      "6466    3.62    571.0  \n",
      "6467    0.40    388.0  \n",
      "6469    2.30    233.0  \n",
      "6470    2.93    276.0  \n",
      "6471    0.81    510.0  \n",
      "6472    0.48    442.0  \n",
      "6473    0.18    268.0  \n",
      "6474    4.18    370.0  \n",
      "6475    1.80    300.0  \n",
      "6476    1.30    257.0  \n",
      "6477    0.70    596.0  \n",
      "6478   10.65    533.0  \n",
      "6479    5.52    476.0  \n",
      "6480    3.71    399.0  \n",
      "6481    0.49    470.0  \n",
      "6482    0.49    470.0  \n",
      "6483    0.00    324.0  \n",
      "6484    4.14    378.0  \n",
      "6485    6.88    420.0  \n",
      "6486    6.88    420.0  \n",
      "6487    3.56    343.0  \n",
      "6488    6.16    358.0  \n",
      "6489    4.52    390.0  \n",
      "6491    0.36    408.0  \n",
      "6492    0.36    408.0  \n",
      "6493    1.12    549.0  \n",
      "6494    0.56    274.0  \n",
      "6495    0.47    414.0  \n",
      "6496    0.47    414.0  \n",
      "6497    1.74    637.0  \n",
      "6498    0.62    358.0  \n",
      "6499    2.92    479.0  \n",
      "6500    0.00    541.0  \n",
      "6501    0.00    541.0  \n",
      "6502    2.09    470.0  \n",
      "6503    0.36    408.0  \n",
      "6504    6.02    416.0  \n",
      "6505    0.43    439.0  \n",
      "6506    3.47    526.0  \n",
      "6507    3.47    526.0  \n",
      "6508     NaN    213.0  \n",
      "6509    0.00    293.0  \n",
      "6510    0.40    307.0  \n",
      "11334   2.08    390.0  \n",
      "12796   3.70    263.0  \n",
      "13462   3.66    341.0  \n",
      "14155   4.47    371.0  \n"
     ]
    }
   ],
   "source": [
    "mask = df_food_main[\"식품명\"].astype(str).str.contains(\"치킨\", na=False) #후라이드 치킨 존재(df말고 df_food_main에 존재)\n",
    "df_chi = df_food_main[mask]\n",
    "print(df_chi)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "302d85a1",
   "metadata": {},
   "source": [
    "#### **(18) 양념치킨**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b9608793",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 3\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6446</th>\n",
       "      <td>닭튀김_양념 치킨</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>248</td>\n",
       "      <td>19.44</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.70</td>\n",
       "      <td>7.78</td>\n",
       "      <td>407.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6447</th>\n",
       "      <td>닭튀김_양념 치킨</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>248</td>\n",
       "      <td>21.04</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.62</td>\n",
       "      <td>3.26</td>\n",
       "      <td>405.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6448</th>\n",
       "      <td>닭튀김_양념 치킨</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>284</td>\n",
       "      <td>23.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.00</td>\n",
       "      <td>310.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "6446  닭튀김_양념 치킨    튀김류        248   19.44    NaN    18.70   7.78    407.0\n",
       "6447  닭튀김_양념 치킨    튀김류        248   21.04    NaN    14.62   3.26    405.0\n",
       "6448  닭튀김_양념 치킨    튀김류        284   23.00    NaN      NaN   3.00    310.0"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df__18 = df_food_main[df_food_main[\"식품명\"].astype(str).str.strip() == \"닭튀김_양념 치킨\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__18))\n",
    "df__18"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "ab68c911",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명          닭튀김_양념 치킨\n",
       "식품대분류명             튀김류\n",
       "에너지(kcal)          248\n",
       "단백질(g)           21.04\n",
       "지방(g)              NaN\n",
       "탄수화물(g)          14.62\n",
       "당류(g)             3.26\n",
       "나트륨(mg)          405.0\n",
       "Name: 6447, dtype: object"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df_food_main[df_food_main[\"식품명\"].astype(str).str.strip() == \"닭튀김_양념 치킨\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__18_1= g.loc[dist.idxmin()]\n",
    "df__18_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4e57adc",
   "metadata": {},
   "source": [
    "#### **(19) 후라이드 치킨**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ce2b5855",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 3\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6508</th>\n",
       "      <td>닭튀김_후라이드 치킨</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>287</td>\n",
       "      <td>28.93</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>213.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6509</th>\n",
       "      <td>닭튀김_후라이드 치킨</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>270</td>\n",
       "      <td>24.67</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.86</td>\n",
       "      <td>0.0</td>\n",
       "      <td>293.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6510</th>\n",
       "      <td>닭튀김_후라이드 치킨</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>282</td>\n",
       "      <td>23.00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.4</td>\n",
       "      <td>307.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "6508  닭튀김_후라이드 치킨    튀김류        287   28.93    NaN     8.10    NaN    213.0\n",
       "6509  닭튀김_후라이드 치킨    튀김류        270   24.67    NaN     6.86    0.0    293.0\n",
       "6510  닭튀김_후라이드 치킨    튀김류        282   23.00    NaN      NaN    0.4    307.0"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df__19 = df_food_main[df_food_main[\"식품명\"].astype(str).str.strip() == \"닭튀김_후라이드 치킨\"].copy()\n",
    "\n",
    "print(\"행 수:\", len(df__19))\n",
    "df__19"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "847e5c7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명          닭튀김_후라이드 치킨\n",
       "식품대분류명               튀김류\n",
       "에너지(kcal)            270\n",
       "단백질(g)             24.67\n",
       "지방(g)                NaN\n",
       "탄수화물(g)             6.86\n",
       "당류(g)                0.0\n",
       "나트륨(mg)            293.0\n",
       "Name: 6509, dtype: object"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df_food_main[df_food_main[\"식품명\"].astype(str).str.strip() == \"닭튀김_후라이드 치킨\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__19_1= g.loc[dist.idxmin()]\n",
    "df__19_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "290df194",
   "metadata": {},
   "source": [
    "#### **(20) 피자**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "601f636f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 4\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11542</th>\n",
       "      <td>피자</td>\n",
       "      <td>빵 및 과자류</td>\n",
       "      <td>153</td>\n",
       "      <td>7.8</td>\n",
       "      <td>4.77</td>\n",
       "      <td>21.07</td>\n",
       "      <td>3.10</td>\n",
       "      <td>179.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12522</th>\n",
       "      <td>피자</td>\n",
       "      <td>빵 및 과자류</td>\n",
       "      <td>231</td>\n",
       "      <td>11.5</td>\n",
       "      <td>9.48</td>\n",
       "      <td>23.49</td>\n",
       "      <td>2.13</td>\n",
       "      <td>196.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13241</th>\n",
       "      <td>피자</td>\n",
       "      <td>빵 및 과자류</td>\n",
       "      <td>219</td>\n",
       "      <td>12.1</td>\n",
       "      <td>7.94</td>\n",
       "      <td>23.36</td>\n",
       "      <td>2.11</td>\n",
       "      <td>212.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13864</th>\n",
       "      <td>피자</td>\n",
       "      <td>빵 및 과자류</td>\n",
       "      <td>128</td>\n",
       "      <td>6.3</td>\n",
       "      <td>4.11</td>\n",
       "      <td>15.57</td>\n",
       "      <td>1.33</td>\n",
       "      <td>126.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      식품명   식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "11542  피자  빵 및 과자류        153     7.8   4.77    21.07   3.10    179.0\n",
       "12522  피자  빵 및 과자류        231    11.5   9.48    23.49   2.13    196.0\n",
       "13241  피자  빵 및 과자류        219    12.1   7.94    23.36   2.11    212.0\n",
       "13864  피자  빵 및 과자류        128     6.3   4.11    15.57   1.33    126.0"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df__20 = df_food[df_food[\"식품명\"].astype(str).str.strip() == \"피자\"].copy() # 내가 포함하지 않은 빵 카데고리에 존재\n",
    "\n",
    "print(\"행 수:\", len(df__20))\n",
    "df__20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ea17a757",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명               피자\n",
       "식품대분류명       빵 및 과자류\n",
       "에너지(kcal)        153\n",
       "단백질(g)           7.8\n",
       "지방(g)           4.77\n",
       "탄수화물(g)        21.07\n",
       "당류(g)            3.1\n",
       "나트륨(mg)        179.0\n",
       "Name: 11542, dtype: object"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df_food[df_food[\"식품명\"].astype(str).str.strip() == \"피자\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__20_1= g.loc[dist.idxmin()]\n",
    "df__20_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "619a0769",
   "metadata": {},
   "source": [
    "#### **(21) 보쌈**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "e9f0ef73",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "행 수: 3\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12768</th>\n",
       "      <td>제육(돼지고기 수육)</td>\n",
       "      <td>찜류</td>\n",
       "      <td>139</td>\n",
       "      <td>11.9</td>\n",
       "      <td>8.50</td>\n",
       "      <td>2.40</td>\n",
       "      <td>0.75</td>\n",
       "      <td>248.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13435</th>\n",
       "      <td>제육(돼지고기 수육)</td>\n",
       "      <td>찜류</td>\n",
       "      <td>150</td>\n",
       "      <td>18.7</td>\n",
       "      <td>7.12</td>\n",
       "      <td>1.20</td>\n",
       "      <td>0.15</td>\n",
       "      <td>319.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14131</th>\n",
       "      <td>제육(돼지고기 수육)</td>\n",
       "      <td>찜류</td>\n",
       "      <td>158</td>\n",
       "      <td>19.7</td>\n",
       "      <td>7.49</td>\n",
       "      <td>1.25</td>\n",
       "      <td>0.15</td>\n",
       "      <td>334.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               식품명 식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "12768  제육(돼지고기 수육)     찜류        139    11.9   8.50     2.40   0.75    248.0\n",
       "13435  제육(돼지고기 수육)     찜류        150    18.7   7.12     1.20   0.15    319.0\n",
       "14131  제육(돼지고기 수육)     찜류        158    19.7   7.49     1.25   0.15    334.0"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#제육(돼지고기 수육)\n",
    "df__21 = df_food[df_food[\"식품명\"].astype(str).str.strip() == \"제육(돼지고기 수육)\"].copy() # 내가 포함하지 않은 빵 카데고리에 존재\n",
    "\n",
    "print(\"행 수:\", len(df__21))\n",
    "df__21"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "448c4326",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명          제육(돼지고기 수육)\n",
       "식품대분류명                찜류\n",
       "에너지(kcal)            150\n",
       "단백질(g)              18.7\n",
       "지방(g)               7.12\n",
       "탄수화물(g)              1.2\n",
       "당류(g)               0.15\n",
       "나트륨(mg)            319.0\n",
       "Name: 13435, dtype: object"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = df_food[df_food[\"식품명\"].astype(str).str.strip() == \"제육(돼지고기 수육)\"].copy()\n",
    "\n",
    "g = g.drop_duplicates(subset=num_cols).copy()\n",
    "\n",
    "med = g[num_cols].median(numeric_only=True)\n",
    "\n",
    "dist = g[num_cols].sub(med).abs().sum(axis=1)\n",
    "\n",
    "# 대표 1행\n",
    "df__21_1= g.loc[dist.idxmin()]\n",
    "df__21_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "207f9745",
   "metadata": {},
   "source": [
    "#### **(22) 과메기**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "9d8f6a17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "식품명               과메기\n",
      "식품대분류명       수·조·어·육류\n",
      "에너지(kcal)         177\n",
      "단백질(g)          20.25\n",
      "지방(g)            9.95\n",
      "탄수화물(g)           0.0\n",
      "당류(g)             0.0\n",
      "나트륨(mg)         794.0\n",
      "Name: 과메기, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# 내가 이용한 데이터 셋에 존재하지 않아서 외부에서 찾아 만듦.(출처:fatsecret-호주에서 시작된 글로벌 음식·칼로리 데이터베이스)\n",
    "df__22_1 = pd.Series({\n",
    "    \"식품명\": \"과메기\",\n",
    "    \"식품대분류명\": \"수·조·어·육류\",   # 예: 실제 분류명\n",
    "    \"에너지(kcal)\": 177,        # 원하는 값으로 직접 입력\n",
    "    \"단백질(g)\": 20.25,\n",
    "    \"지방(g)\": 9.95,\n",
    "    \"탄수화물(g)\": 0.0,\n",
    "    \"당류(g)\": 0.0,\n",
    "    \"나트륨(mg)\": 794.0\n",
    "}, name=\"과메기\")  # name은 인덱스 이름\n",
    "\n",
    "print(df__22_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "7defa1a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11959</th>\n",
       "      <td>감자전</td>\n",
       "      <td>전·적 및 부침류</td>\n",
       "      <td>93</td>\n",
       "      <td>1.98</td>\n",
       "      <td>3.24</td>\n",
       "      <td>13.75</td>\n",
       "      <td>0.38</td>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12695</th>\n",
       "      <td>감자탕</td>\n",
       "      <td>찌개 및 전골류</td>\n",
       "      <td>51</td>\n",
       "      <td>3.39</td>\n",
       "      <td>2.61</td>\n",
       "      <td>3.87</td>\n",
       "      <td>0.55</td>\n",
       "      <td>172.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13798</th>\n",
       "      <td>김밥</td>\n",
       "      <td>밥류</td>\n",
       "      <td>157</td>\n",
       "      <td>4.70</td>\n",
       "      <td>1.83</td>\n",
       "      <td>29.79</td>\n",
       "      <td>0.69</td>\n",
       "      <td>319.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>304</th>\n",
       "      <td>떡볶이</td>\n",
       "      <td>볶음류</td>\n",
       "      <td>144</td>\n",
       "      <td>3.51</td>\n",
       "      <td>2.96</td>\n",
       "      <td>25.96</td>\n",
       "      <td>4.40</td>\n",
       "      <td>391.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11563</th>\n",
       "      <td>라면</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>79</td>\n",
       "      <td>1.50</td>\n",
       "      <td>2.52</td>\n",
       "      <td>12.19</td>\n",
       "      <td>0.01</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13323</th>\n",
       "      <td>삼계탕</td>\n",
       "      <td>국 및 탕류</td>\n",
       "      <td>80</td>\n",
       "      <td>7.32</td>\n",
       "      <td>3.85</td>\n",
       "      <td>3.54</td>\n",
       "      <td>0.29</td>\n",
       "      <td>102.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12194</th>\n",
       "      <td>새우튀김</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>145</td>\n",
       "      <td>7.10</td>\n",
       "      <td>5.52</td>\n",
       "      <td>16.54</td>\n",
       "      <td>2.22</td>\n",
       "      <td>322.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>수제비</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>58</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.52</td>\n",
       "      <td>11.08</td>\n",
       "      <td>0.00</td>\n",
       "      <td>142.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11169</th>\n",
       "      <td>순대</td>\n",
       "      <td>찜류</td>\n",
       "      <td>181</td>\n",
       "      <td>6.52</td>\n",
       "      <td>8.55</td>\n",
       "      <td>19.45</td>\n",
       "      <td>1.17</td>\n",
       "      <td>340.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>족발</td>\n",
       "      <td>찜류</td>\n",
       "      <td>233</td>\n",
       "      <td>26.04</td>\n",
       "      <td>13.91</td>\n",
       "      <td>0.93</td>\n",
       "      <td>0.00</td>\n",
       "      <td>345.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13280</th>\n",
       "      <td>짜장면</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>105</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1.25</td>\n",
       "      <td>20.90</td>\n",
       "      <td>1.51</td>\n",
       "      <td>295.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13264</th>\n",
       "      <td>짬뽕</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>73</td>\n",
       "      <td>2.80</td>\n",
       "      <td>1.27</td>\n",
       "      <td>11.93</td>\n",
       "      <td>0.46</td>\n",
       "      <td>125.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11589</th>\n",
       "      <td>칼국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>97</td>\n",
       "      <td>2.70</td>\n",
       "      <td>0.29</td>\n",
       "      <td>20.03</td>\n",
       "      <td>0.22</td>\n",
       "      <td>184.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11594</th>\n",
       "      <td>콩국수</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>70</td>\n",
       "      <td>4.00</td>\n",
       "      <td>1.34</td>\n",
       "      <td>10.19</td>\n",
       "      <td>0.75</td>\n",
       "      <td>159.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11240</th>\n",
       "      <td>파전</td>\n",
       "      <td>전·적 및 부침류</td>\n",
       "      <td>195</td>\n",
       "      <td>4.56</td>\n",
       "      <td>9.35</td>\n",
       "      <td>23.20</td>\n",
       "      <td>0.52</td>\n",
       "      <td>231.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12550</th>\n",
       "      <td>고기만두</td>\n",
       "      <td>면 및 만두류</td>\n",
       "      <td>96</td>\n",
       "      <td>5.40</td>\n",
       "      <td>1.81</td>\n",
       "      <td>13.59</td>\n",
       "      <td>0.04</td>\n",
       "      <td>162.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>481</th>\n",
       "      <td>육회</td>\n",
       "      <td>수·조·어·육류</td>\n",
       "      <td>130</td>\n",
       "      <td>9.93</td>\n",
       "      <td>6.43</td>\n",
       "      <td>8.12</td>\n",
       "      <td>5.29</td>\n",
       "      <td>418.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6447</th>\n",
       "      <td>닭튀김_양념 치킨</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>248</td>\n",
       "      <td>21.04</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.62</td>\n",
       "      <td>3.26</td>\n",
       "      <td>405.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6509</th>\n",
       "      <td>닭튀김_후라이드 치킨</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>270</td>\n",
       "      <td>24.67</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.86</td>\n",
       "      <td>0.00</td>\n",
       "      <td>293.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11542</th>\n",
       "      <td>피자</td>\n",
       "      <td>빵 및 과자류</td>\n",
       "      <td>153</td>\n",
       "      <td>7.80</td>\n",
       "      <td>4.77</td>\n",
       "      <td>21.07</td>\n",
       "      <td>3.10</td>\n",
       "      <td>179.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13435</th>\n",
       "      <td>제육(돼지고기 수육)</td>\n",
       "      <td>찜류</td>\n",
       "      <td>150</td>\n",
       "      <td>18.70</td>\n",
       "      <td>7.12</td>\n",
       "      <td>1.20</td>\n",
       "      <td>0.15</td>\n",
       "      <td>319.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>과메기</th>\n",
       "      <td>과메기</td>\n",
       "      <td>수·조·어·육류</td>\n",
       "      <td>177</td>\n",
       "      <td>20.25</td>\n",
       "      <td>9.95</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>794.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               식품명     식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  \\\n",
       "11959          감자전  전·적 및 부침류         93    1.98   3.24    13.75   0.38   \n",
       "12695          감자탕   찌개 및 전골류         51    3.39   2.61     3.87   0.55   \n",
       "13798           김밥         밥류        157    4.70   1.83    29.79   0.69   \n",
       "304            떡볶이        볶음류        144    3.51   2.96    25.96   4.40   \n",
       "11563           라면    면 및 만두류         79    1.50   2.52    12.19   0.01   \n",
       "13323          삼계탕     국 및 탕류         80    7.32   3.85     3.54   0.29   \n",
       "12194         새우튀김        튀김류        145    7.10   5.52    16.54   2.22   \n",
       "109            수제비    면 및 만두류         58    2.31   0.52    11.08   0.00   \n",
       "11169           순대         찜류        181    6.52   8.55    19.45   1.17   \n",
       "235             족발         찜류        233   26.04  13.91     0.93   0.00   \n",
       "13280          짜장면    면 및 만두류        105    4.00   1.25    20.90   1.51   \n",
       "13264           짬뽕    면 및 만두류         73    2.80   1.27    11.93   0.46   \n",
       "11589          칼국수    면 및 만두류         97    2.70   0.29    20.03   0.22   \n",
       "11594          콩국수    면 및 만두류         70    4.00   1.34    10.19   0.75   \n",
       "11240           파전  전·적 및 부침류        195    4.56   9.35    23.20   0.52   \n",
       "12550         고기만두    면 및 만두류         96    5.40   1.81    13.59   0.04   \n",
       "481             육회   수·조·어·육류        130    9.93   6.43     8.12   5.29   \n",
       "6447     닭튀김_양념 치킨        튀김류        248   21.04    NaN    14.62   3.26   \n",
       "6509   닭튀김_후라이드 치킨        튀김류        270   24.67    NaN     6.86   0.00   \n",
       "11542           피자    빵 및 과자류        153    7.80   4.77    21.07   3.10   \n",
       "13435  제육(돼지고기 수육)         찜류        150   18.70   7.12     1.20   0.15   \n",
       "과메기            과메기   수·조·어·육류        177   20.25   9.95     0.00   0.00   \n",
       "\n",
       "       나트륨(mg)  \n",
       "11959     69.0  \n",
       "12695    172.0  \n",
       "13798    319.0  \n",
       "304      391.0  \n",
       "11563     58.0  \n",
       "13323    102.0  \n",
       "12194    322.0  \n",
       "109      142.0  \n",
       "11169    340.0  \n",
       "235      345.0  \n",
       "13280    295.0  \n",
       "13264    125.0  \n",
       "11589    184.0  \n",
       "11594    159.0  \n",
       "11240    231.0  \n",
       "12550    162.0  \n",
       "481      418.0  \n",
       "6447     405.0  \n",
       "6509     293.0  \n",
       "11542    179.0  \n",
       "13435    319.0  \n",
       "과메기      794.0  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items = [df__1_1, df__2_1, df__3_1, df__4_1, df__5_1, df__6_1, df__7_1, df__8_1, df__9_1, df__10_1, df__11_1, df__12_1, df__13_1, df__14_1, df__15_1,df__16_1, \n",
    "         df__17_1, df__18_1, df__19_1, df__20_1, df__21_1, df__22_1]\n",
    "\n",
    "df_all = pd.DataFrame(items)\n",
    "df_all"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d331c65",
   "metadata": {},
   "source": [
    "## **2. 결측치 처리**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "9f4fa10c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "식품명          0\n",
       "식품대분류명       0\n",
       "에너지(kcal)    0\n",
       "단백질(g)       0\n",
       "탄수화물(g)      0\n",
       "당류(g)        0\n",
       "나트륨(mg)      0\n",
       "지방(g)        2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean = df_all.copy()\n",
    "df_clean.isna().sum(axis=0).sort_values() # 결측치 및 중복 데이터 확인"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42e6f264",
   "metadata": {},
   "source": [
    "### **2-1. 지방 결측치 처리**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "8e071dcd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              식품명 식품대분류명\n",
      "6447    닭튀김_양념 치킨    튀김류\n",
      "6509  닭튀김_후라이드 치킨    튀김류\n"
     ]
    }
   ],
   "source": [
    "# 지방 비어 있는 음식\n",
    "aa = df_clean[df_clean[\"지방(g)\"].isna()][[\"식품명\", \"식품대분류명\"]]\n",
    "print(aa)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52989417",
   "metadata": {},
   "source": [
    "##### **식품대분류명(튀김)별 중앙값으로 대체**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "bd772e33",
   "metadata": {},
   "outputs": [],
   "source": [
    "aa_1 = df_food.groupby(\"식품대분류명\")[\"지방(g)\"].transform(\"median\")\n",
    "df_clean[\"지방(g)\"] = df_clean[\"지방(g)\"].fillna(aa_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "72c24a75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(0)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean[\"지방(g)\"].isna().sum() # 결측치 처리 확인."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "748717c6",
   "metadata": {},
   "source": [
    "## **3. 이상치 처리** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "6577f52d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           count        mean         std    min       25%      50%       75%  \\\n",
      "에너지(kcal)   22.0  135.681818   62.545516  51.00   83.2500  137.000  172.0000   \n",
      "단백질(g)      22.0    8.646364    7.882631   1.50    3.4200    5.050    9.3975   \n",
      "지방(g)       22.0    4.861364    3.760951   0.29    1.8150    3.545    8.1925   \n",
      "탄수화물(g)     22.0   13.127727    8.422879   0.00    7.1750   12.890   19.8850   \n",
      "당류(g)       22.0    1.136818    1.540740   0.00    0.0675    0.490    1.4250   \n",
      "나트륨(mg)     22.0  264.727273  161.788275  58.00  159.7500  262.000  335.5000   \n",
      "\n",
      "              max  \n",
      "에너지(kcal)  270.00  \n",
      "단백질(g)      26.04  \n",
      "지방(g)       13.91  \n",
      "탄수화물(g)     29.79  \n",
      "당류(g)        5.29  \n",
      "나트륨(mg)    794.00  \n"
     ]
    }
   ],
   "source": [
    "print(df_clean.describe().T) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "842f7dce",
   "metadata": {},
   "source": [
    "### **이상치 후보**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "7042b944",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "에너지(kcal): 상한=308.50, 하한=-87.50\n",
      "단백질(g): 상한=20.06, 하한=-7.80\n",
      "지방(g): 상한=16.59, 하한=-8.23\n",
      "탄수화물(g): 상한=39.81, 하한=-18.53\n",
      "나트륨(mg): 상한=803.75, 하한=-242.25\n",
      "당류(g): 상한=4.51, 하한=-2.42\n"
     ]
    }
   ],
   "source": [
    "for c in num_cols:\n",
    "    q1 = df[c].quantile(0.25)      # 1사분위수\n",
    "    q3 = df[c].quantile(0.75)      # 3사분위수\n",
    "    iqr = q3 - q1                  # IQR\n",
    "    upper = q3 + 1.5 * iqr         # 상한\n",
    "    lower = q1 - 1.5 * iqr         # 하한\n",
    "    \n",
    "    print(f\"{c}: 상한={upper:.2f}, 하한={lower:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "81011354",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>식품명</th>\n",
       "      <th>식품대분류명</th>\n",
       "      <th>에너지(kcal)</th>\n",
       "      <th>단백질(g)</th>\n",
       "      <th>지방(g)</th>\n",
       "      <th>탄수화물(g)</th>\n",
       "      <th>당류(g)</th>\n",
       "      <th>나트륨(mg)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>족발</td>\n",
       "      <td>찜류</td>\n",
       "      <td>233</td>\n",
       "      <td>26.04</td>\n",
       "      <td>13.91</td>\n",
       "      <td>0.93</td>\n",
       "      <td>0.00</td>\n",
       "      <td>345.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>481</th>\n",
       "      <td>육회</td>\n",
       "      <td>수·조·어·육류</td>\n",
       "      <td>130</td>\n",
       "      <td>9.93</td>\n",
       "      <td>6.43</td>\n",
       "      <td>8.12</td>\n",
       "      <td>5.29</td>\n",
       "      <td>418.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6447</th>\n",
       "      <td>닭튀김_양념 치킨</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>248</td>\n",
       "      <td>21.04</td>\n",
       "      <td>8.93</td>\n",
       "      <td>14.62</td>\n",
       "      <td>3.26</td>\n",
       "      <td>405.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6509</th>\n",
       "      <td>닭튀김_후라이드 치킨</td>\n",
       "      <td>튀김류</td>\n",
       "      <td>270</td>\n",
       "      <td>24.67</td>\n",
       "      <td>8.93</td>\n",
       "      <td>6.86</td>\n",
       "      <td>0.00</td>\n",
       "      <td>293.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>과메기</th>\n",
       "      <td>과메기</td>\n",
       "      <td>수·조·어·육류</td>\n",
       "      <td>177</td>\n",
       "      <td>20.25</td>\n",
       "      <td>9.95</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>794.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              식품명    식품대분류명  에너지(kcal)  단백질(g)  지방(g)  탄수화물(g)  당류(g)  나트륨(mg)\n",
       "235            족발        찜류        233   26.04  13.91     0.93   0.00    345.0\n",
       "481            육회  수·조·어·육류        130    9.93   6.43     8.12   5.29    418.0\n",
       "6447    닭튀김_양념 치킨       튀김류        248   21.04   8.93    14.62   3.26    405.0\n",
       "6509  닭튀김_후라이드 치킨       튀김류        270   24.67   8.93     6.86   0.00    293.0\n",
       "과메기           과메기  수·조·어·육류        177   20.25   9.95     0.00   0.00    794.0"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 1️⃣ 이상치 기준(하한, 상한) 직접 정의\n",
    "bounds = {\n",
    "    \"에너지(kcal)\": (-87.50, 308.50),\n",
    "    \"단백질(g)\"   : (-7.80, 20.06),\n",
    "    \"지방(g)\"     : (-8.23, 16.59),\n",
    "    \"탄수화물(g)\" : (-18.53, 39.81),\n",
    "    \"나트륨(mg)\"  : (-242.25, 803.75),\n",
    "    \"당류(g)\"     : (-2.42, 4.51),\n",
    "}\n",
    "\n",
    "# 2️⃣ 각 행이 하나라도 범위를 벗어나면 True\n",
    "mask = df_clean.apply(\n",
    "    lambda row: any(\n",
    "        (row[col] < lo) | (row[col] > hi)\n",
    "        for col, (lo, hi) in bounds.items()\n",
    "    ),\n",
    "    axis=1\n",
    ")\n",
    "\n",
    "# 3️⃣ 이상치 후보만 추출\n",
    "outliers = df_clean[mask].copy()\n",
    "outliers.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a716618",
   "metadata": {},
   "source": [
    "#### **--> 족발, 양념치킨, 후라이드치킨은 살코기 비중이 높아 단백질이 20g을 넘게 나오는 게 충분히 있을 수 있는 값임.**\n",
    "#### **과메기는 건조 과정으로 수분이 빠져 단백질 농축으로 충분히 있을 수 있는 값이라고 판정.**\n",
    "#### **육회의 당류가 높게 나온 것은 배/사과 등 과일 + 설탕/물엿/양념장으로 인한 것으로 보임.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "ca0968e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA90AAAHqCAYAAAAZLi26AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAUR1JREFUeJzt3XtcVNX+//H3cBsBBQQUVEg8Xiq1rI43NJPK0rTUCruoJWUXj2mSec/vL+lyNC3rHK3UY0Vl5tGOZqlpXsLEW56MvGWlhYKKigUjiigwvz/8Ml9HZoCB2Q7i6/l47MfDvfZea3+G4TxOb9bea5usVqtVAAAAAADA7bw8XQAAAAAAADUVoRsAAAAAAIMQugEAAAAAMAihGwAAAAAAgxC6AQAAAAAwCKEbAAAAAACDELoBAAAAADAIoRsAAAAAAIMQugEAAAAAMAihGwBwRWnXrp2WLl3q6TKqLavVqry8PFmtVk+XUiMMGjRI69evr3T/jIwMvfXWW+4r6ALPPvus5syZY8jYAID/Q+gGANQI11xzjUwmk8MtPj7edt7x48eVn5/vdJzw8HCn45Rs11xzzaX4SIYZOHCgxo0b5/DYgQMHVKdOHR09erTUsVmzZpX7synZhgwZ4nJdCQkJGjZsmCQpOTnZ6c954sSJ6tGjh9Nxzpw5I5PJpF27djk9pyrf85YtW8rsd6H169fryJEjpcZ4/fXXFRcXV6o9OTlZrVu3tu3v37/f6XflyKRJk8r9XCV++eUXHT582OE4EydOrND3/O2331a4NgC4Uvl4ugAAANxlxowZeuihh0q1m83mCo/xyy+/qLi42OnxJUuW6I033qhUfZe7QYMGqW/fvhU6NyAgoFTb66+/rtGjR5dqHzFihGGzuc6443s+fvy43f6uXbt06623Vrm2s2fPau/evZKkgwcPutR33LhxSkxMrHINEyZMKHecxo0bl/ojAwCgNEI3AKDGqF27tsLDw6s0RmhoaJnH69SpU+bxf/3rX/rggw+UmpoqL6/ybyg7fPiw2rZtq9WrV6tVq1Yu1VpZJ06ccOkPESX8/f3l7++vTz/9VO+//75Wr15td3zYsGGqW7euXn75ZadjxMbGavHixXZtgYGBLteyatWqKgW+qn7Pkkr9roWEhEhShesqLCxUTk6OXdvp06f166+/6tprr7W1ufJd1apVS7Vq1VKzZs304YcfqnPnzpKkq6++Wu+++666du2qM2fOSFKZf3QICAhw+IeTC1mtVnl7e1e4NgC4UhG6AQBXnGXLlikzM1NNmzbVvffea3csPDxcJ06cKLP/1Vdf7bA9IyNDEyZM0MaNGysUuCWpYcOGmjJlih599FH997//NXzm8OzZs/ruu+8UGBiooqKiSoUmb29v/fbbb6XaDx48aAuezvj5+SkyMtLla17stttu07///W+HxwoKChQVFVVm/6p8z+U5efKk7d9l/SFl48aNqlu3bqn2Vq1aKS0tTdL529N79erlcg1nz55VXl6ebf/YsWPy8/PT5MmT9T//8z+29k6dOrk8dolz587J19e30v0B4ErBM90AgCvOjz/+qJUrV+r77793eHzJkiU6efKk02379u0O+73xxhvq3bu3WrRo4VI9AwcO1MmTJ/Xll1+6/FlclZycrODgYPn5+emdd95xqW9+fr5ycnJkMpmUk5NTavvjjz/k6+urnJwcu8BnBF9fX4WHhzvcwsLCKjRGZb/n8tSuXdu2lfVHlK5du8pqtdptH3zwgc6cOaNdu3Zp165d+v333ytVg7+/v21GWzr/h4jAwEBNnDjRdq3u3btXamzp/Cx5YWGh/P39Kz0GAFwpmOkGANR4Z8+elZeXl3x8zv/f3gsvvODw2e+KKi4uVnFxsd1sdkFBgd5//31t2LDB7twDBw5o5MiRWr16tUwmkx544AHdeOONmjBhgu3WYi8vLz3zzDN655131Lt370rXVZ7du3dr7NixtuB999136y9/+UuFZ1KHDx+u9957z7bvaJZ248aNmjRpkjp06KAtW7a4rfaLVfX28opw9D1XREJCgu3f2dnZLl/32LFjmjhxoiSVOxvvTEBAQKnQHRAQoI8//tj2He7YsUMdO3as1Pglf1SpyG34AHClI3QDAGqMoUOHKjExUVarVUVFRSoqKtLZs2dVXFysDz/8UI8++miFxrn4lnNHNm/ebBdYSm7ZbtOmja0tJydHt9xyixo2bKjFixcrLCxM7733npKSkkqN1717d40fP15nz56Vn59fhep0xe7du9WjRw89/fTT6tOnj6Tzz58/9NBDmjRpkkaMGGH7o4Qzc+fO1dy5c91e24U++ugjLVu2THl5eU6fz6/IIl+S4z8KXKgy3/OFsrKy7PZLAvKFq49/8cUXTsdev369wz8ctGrVSsuWLZMkpaSklLlSuzMXhu7CwkIVFxfLx8dHcXFxatOmjUJDQ/XII4+U6hcSEqLc3NwKXycmJkbS+UX2kpOTXa4TAK4EhG4AQI3w1Vdf6ezZszKZTLZZbT8/P5nNZgUEBFT4NthDhw5V6B3VFy9utXXrVsXGxtq1zZw5U6dPn9bq1atVu3ZtW1tmZqZSUlLszr3mmmvk7++vnTt36q9//WuFaq2or776Svfee6+GDh2qKVOm2NoffvhhRUZG6tlnn9Wdd96p6667zmH/tLQ03XjjjZW69gcffGA381ue7t276/nnn9fy5cu1aNEih+dUZJGv8lT2e75QgwYNHLaPGjXK9u+ZM2c6POeZZ55x+nMp748fZYmJidGBAwckSZs2bbK7RrNmzeTt7a3ExES9/vrrDj/bnj17Si2w1q5dO73yyiu229G7deump59+Wv369bOdU5nF8ADgSkHoBgDUCE2aNKnQefHx8aXOPXv2rCwWi0vXK7m9Njg4WL6+vsrKyioVwlavXq1+/frZAneJ7t27lwrdkhQREeHw/dgX+vjjj/Xkk0/atf38889q3Lix0z633367vvzyS91xxx2ljt16663auXNnmdds3bq1w3dNS9Krr76qvXv36uOPP3Z4PDg4uMyxLxYREaGOHTvaXpl1IVdnYUuUzMK643uWpI4dO1YosJelZCX4klvYL1ZYWChJ6ty5s0ufeceOHQ7HM5lM8vHxkb+/f5m3yzds2LBUm7e3t8LCwmyL0/n4+Khu3brlLlYHADiP0A0AqFGOHTumN998UytXrtT+/ft1+vRpBQYG6i9/+YvuuusujRkzRvXr17frs2LFigrdauzIN998o7i4OOXm5ioiIsLu2JEjR3TXXXeV6uNs1r1u3bqlXiF1sd69e6tdu3Z2bY6C0oX8/Px0xx13qKioSH/++WeZ59auXVvHjx+3W4zMx8fH6YrjgYGBMpvNVVqR/OzZsxWa3f3tt98cBsrvv/9ePXr0UFZWlsPV2GvVqiXJPd/zxfbt26c333xT33zzjQ4ePKgzZ84oKChI11xzje677z6tWLFCV111ldNxH3/8cX344YdlXttsNts9n12WoKAgp8fOnTtnF7hfffVVp38UOXv2rKxWa6VeLQcAsEfoBgDUGAcOHFDHjh3Vpk0b/f3vf1fr1q0VEhKiP//8Uzt37tRbb72lG264QVu3blV0dLStX9++fe1mLqdMmaKVK1eWmo2+4YYbNGTIEA0ZMqTUtevUqVNqFjUsLMzhQlrOZrNzc3PLXZgqODjY5dnjEhe//7ksR44ccRik27Zt63DV9wufTS4rJG7evFlRUVGyWq06d+6czpw5o5MnT2rHjh3l1lTybu3FixerVq1a6tmzp6T/m00PCwsrM7y743u+UGpqqrp3766+ffvqnXfeUfPmzRUUFKQTJ05oy5Yteu211/Txxx8rNTXV6RizZ892egu6dP7ndc8995RZhzO//vqrpk+frnXr1ik9Pd22oGBkZKTat2+vp59+2umjDCNHjlReXh7PaQOAG/DKMABAjfH2228rLCxMK1as0F133aXo6GjVqVNHV111lXr16qVVq1apbt26mjVrltuvXb9+/VJh+qabbtLnn39uu1VYOr8i9meffeZwjGPHjpWahXena665ptQrqi7eKvKKqtdee01HjhxxuC1fvtxpv0ceeUSbNm3SsmXL9PXXX2vz5s365ZdfdObMGafPkzuyePFirVixosLnG+Xvf/+7evTooU8++URxcXFq1KiR6tSpo5iYGD300EPasGGDfvvtNy1YsMDpGCXrDzjbKvMeden8s9k33nijioqK9P777+vIkSM6d+6c/vzzT61Zs0ZxcXHq37+/ZsyYUe5YSUlJdt/PuHHj1L59+0rVBQBXIma6AQBXlKo+i+tM27Zt9e6779q1jRkzRh988IH69u2rCRMmyGQy6Y033nBYw/79+5Wbm6vrr7/ekPrcKSgoyOnt5CWz0Y5ERESUugXfHcLDw/Xggw+6/Govo5X8IaMsTz75ZIVuL3fVypUrFRgYqDlz5ti1BwUFKSgoSNdee60OHjyozz77TMOHDy9zrMGDB9vtDxw40OV6AOBKVr3+3wkAgCoYOnSosrOzdc8992jVqlXKzMzUyZMnlZGRoeXLl6t79+76448/9NRTT7n92p06ddLx48ftFgBr3LixVq1apWPHjunWW2/Vww8/rM6dO+uJJ54o9Vqwr7/+WrGxsRVeZd2T8vPzlZOT43ArWXjMaGfOnFF2drays7MVEhKimTNn6o8//rC1ZWdn69SpU4bWMG7cOH311VcaMGCA1q1bp4yMDP3555/av3+/5s+fr5tvvlkxMTF68MEHyxxn0KBBOn78uNMt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AAAAABiEV4bVQLuSupf5njgAAAAAwKXBTDcAAAAAAAYhdAMAAAAAYBBCNwAAAAAABiF0AwAAAABgEEI3AAAAAAAGIXQDAAAAAGAQXhlWA7V+cZW8zAGeLgMAAFRA+pReni4BAGAgZroBAAAAADAIoRsAAAAAAIMQugEAAAAAMAihGwAAAAAAgxC6AQAAAAAwCKEbAAAAAACDELoBAAAAADAIoRsAAAAAAIMQusuQkJCguXPnlnve999/r6FDh+qWW25Rq1at1KlTJyUkJCglJcX4IgEAAAAA1Va1Cd3Dhg3TlClTKnz+9ddfr8jISNtWq1Yt1a1b167tpZdeKnOMn376SXFxcapbt66aNGmijz76yOW6V69erb59+6pbt276z3/+ox9//FHLly/XwIED9cwzzzgN7cOHD1d4eLjDLTAwUBMnTnS5FgAAAABA9eLj6QIkKT8/X19//bUiIyM1ZswYeXmV/7eAHTt22O23b99ejz32mP72t79V6Jrnzp1Tr169NG7cOK1du1a//PKLevTooaZNm6pz584Vrn3p0qV65JFHdN9999na6tatq27dumnkyJH67LPP9MQTT5TqN2PGDM2YMcPhmK+88orOnDlT4RoAAAAAANWTx2e6Dxw4oF69eunRRx/V1Vdfrf79++v48eMujbFt2zb98ssvmjNnjoqKiirU5z//+Y+aNWump556St7e3rr22mv1yiuvaOrUqS5d+9Zbb9W///1vbdq0SVar1da+e/duzZkzR7feeqvDfgkJCQoPD1dMTEypbe7cuapbt65LdQAAAAAAqh+PzHQfPnxY3377rb766ivt2LFDU6ZMUffu3SVJH374oW6++WZ17dpVXbp00e23366GDRs6HSsjI0P9+/fXokWL9MEHH+jpp5/WrFmz5ONT9kfbuXNnqUB8++23a/z48crOzpYkFRQUlPtZ7r//fpnNZk2ZMkW//vqrioqKZDKZFBUVpWeeeUaPPPKI076vv/66EhISyr0GAAAAAODy5JHQnZ2dre+//16DBg3SrbfeKpPJZDs2aNAgDRgwQMuXL9e3336r2267zek4S5cu1fDhwzVjxgzdcccdiouL06BBg9S1a1clJyerefPmTvv+8ccfaty4sV1bWFiYDh8+rG7dukmSDh48qNtvv73cz3P33Xfr7rvvLve8i40cOdLps9utWrXS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bIRuAAAAAAAMQugGAAAAAMAghG4AAAAAAAxC6AYAAAAAwCCEbgAAAAAADOLj6QLgfruSupe5ZD0AAAAA4NJgphsAAAAAAIMQugEAAAAAMAihGwAAAAAAgxC6AQAAAAAwCKEbAAAAAACDELoBAAAAADAIrwyrgVq/uEpe5gBPl1EjpE/p5ekSAAAAAFzGmOkGAAAAAMAghG4AAAAAAAxC6AYAAAAAwCCEbgAAAAAADELoBgAAAADAIIRuAAAAAAAMQugGAAAAAMAghG43ycvL06uvvlqq3WKx6JNPPvFARQAAAAAAT3N76J47d64SEhKqNMayZcu0YsUKt9SzfPly7dixwy1jlSUvL08zZswo1X7s2DG98MILhl8fAAAAAFD9uBS6p06dqvDwcIWHh8vf31916tSx7W/durVCY4wYMUKRkZGKjIyUn5+fwsLCbPtHjhyRJG3ZskXfffdduWOlp6fL29vb1j8yMlL16tVTTEyM7ZxFixZVaCxJatu2rf773/86PJaYmKi33nrLri0zM1NRUVGKiorSTTfdpOPHj9v2W7VqVe71Sn52jjZvb2/t27evQnUDAAAAAKonH1dOHjNmjMaMGSNJSkhIUMeOHTVkyBCXLviPf/xD//jHPyRJ7dq108svv6wePXq4NMaFoqOjlZ6ebttPT09XXFxcpcfr1auXfH19S7Xn5ubq5ZdftmuLiopSZmampPMB/MYbb7TtV0R2drbTY82aNavwOAAAAACA6sml0H2hn376SQEBAZKknTt32ma6U1NTK9TfYrFo9+7dWr16tXr06KG//e1vWrRokSTp9OnTtnB/qS1fvlxt27Yt1Z6YmFhmv++++07Z2dn66aefdO2111boWiaTSY0bN3Z63FH4BwAAAABcPir1TPf27dt17NgxLVu2TIcPH1ZOTo727dunffv26dixYxUaY/z48XryySe1bNkybdiwQe+++66ys7OVnZ2tkSNHVqYsj8nLy9PEiRP13HPP6cknn1R+fn6F+6anpzvdygrkAAAAAIDqz+WZ7vz8fA0dOlRvvfWWcnNzdd9992nNmjXq0qWLpPMLqZU1211YWKgJEybo4MGDWrJkiZ599ln17t1bf/vb3/T000+7PLtb8lx1iaKiIpnNZlc/liQpIiJCffv2dXo8KSmpVNsff/yhu+++W/fee69effVVJSYmqmvXrvrkk0/UvHnzcq95Ye2Orjd48GCnxwsKClRQUGDbt1gs5V4PAAAAAHDpuBS6c3JyNGDAAN16663q06ePJCkjI0O33nqrPvzwQ7Vs2bLcMeLj49WkSRMtWbJEPj4+atq0qTZs2KBRo0Zp7969uu666ypcT0xMjAoLC+3aTpw4oZ9//tmVj2WzfPlyl87fsGGD7r//fj3zzDN68cUXJUlvvfWW5s6dq169emnjxo1l9rdarZWqs8TkyZMd/iEAAAAAAFA9mKwuJL/HH39cDRo0KPU+6oULFyo6OlqxsbG2me7k5GRJ55/3fuKJJ7Ru3ToFBgaqqKhI3t7eZV5n27ZtMplMDp+tLk9KSoomTpxom23fs2ePQkJC1LBhQ5fHKk9hYaF2796tNm3alDpmtVplMpl0+vRpbdmyRbfddpvbr+9opjs6OlrRiQvlZQ5w+/WuROlTenm6BAAAAADVkMViUXBwsHJzcxUUFOT0PJdmut9//31J0oEDB3T69GnbgmEPPPCA0z7XXXed3evEvL29VVRUpEaNGpV5rVGjRlUodO/Zs0d33nmnbb+goEAWi8Xutu02bdqUOYt93333adOmTXZthYWFys3NVVhYWKnzp0+frv79+8vHx0dt2rTRjh071LNnT6fjR0dHa/Pmzbb9C2s7duyYQkJC5OfnJ0kqLi5WVlaW3R8JUlNT7V6DVsJsNlf6VnoAAAAAgPEqtXr5kiVLtG/fPs2cObPUse7du6tdu3Zl9vf29lZWVpbT4xMnTlReXl6FamnZsqXda7oee+wxzZ8/32lQdWTx4sWl2tLS0jRw4EDt2rWr3P5nz55VeHi40tLSSh1z9AqzC+tt27atZs6cqY4dO0o6/xqxZs2aufTqMQAAAABA9VSp1cvLEh0d7fB2a6MVFxfrpZde0s6dOzVz5kz17NlTv/zyyyWvAwAAAACAEpV+T3d1ceDAAa1evVr//Oc/1bZtW6WkpKh27dqKiYlRz5491a1bNz3wwAPq0KGDAgMDPV0uAAAAAOAKUunQnZycrM8//9zhsVq1amnfvn2VHVrBwcHlLrZW4ptvvtGePXs0f/58tW7d2tZ+xx13aM+ePfrkk080Z84cNWnSRE2aNKl0TeXZs2ePw9d/VeUVZgAAAACAy5tLq5dfSQ4ePKh3331XkydPNvQ606dP1/3336/GjRtLkk6dOqVXXnmlUtctWT2P1cvdh9XLAQAAADhS0dXLCd01CKHb/QjdAAAAABypaOh2+0JqAAAAAADgPEI3AAAAAAAGIXQDAAAAAGAQQjcAAAAAAAYhdAMAAAAAYBBCNwAAAAAABvHxdAFwv11J3ctcsh4AAAAAcGkw0w0AAAAAgEEI3QAAAAAAGITQDQAAAACAQQjdAAAAAAAYhNANAAAAAIBBCN0AAAAAABiE0A0AAAAAgEF4T3cN1PrFVfIyB3i6jMta+pReni4BAAAAQA3ATDcAAAAAAAYhdAMAAAAAYBBCNwAAAAAABiF0AwAAAABgEEI3AAAAAAAGIXQDAAAAAGAQQvclsHfvXk2fPt3TZQAAAAAALjFCdxUNGTJEkZGR8vb2VkREhCIjIxUUFKTatWsrMjJSmzZtUmZmpr744gu7fhs3blR4eLjDLTQ0VFFRUR76RAAAAAAAdyF0V9GsWbN06NAheXt7a+vWrcrKytKzzz6rgQMHKisrS506dXLYr3PnzsrOzna47dix4xJ/CgAAAACAEXw8XUBNsGnTJplMJq1YsUJDhw5VWlqasrKyyuyTkpKiHj16KDIy0uHx6OhoI0oFAAAAAFxChG43+Pvf/67Zs2drypQpatmypXbs2KF69erp22+/1S233OK0X8eOHZWSknLpCgUAAAAAXFKE7iqaNGmS/Pz8lJCQoObNm+u2227T9OnT1aFDBz388MNaunSp076bN28u89ntr7/+Wi1btjSibAAAAADAJUDorqI2bdpo9OjRkqT169ere/fuGjp0qEwmk2bNmqXPP/9c7du3L9UvLi5OBQUFl7pcAAAAAMAlZLJarVZPF1FTHD16VEFBQfL397drP3z4sH744Qf16tXLrdcrKCiwC+4Wi0XR0dGKTlwoL3OAW691pUmf4t7vCgAAAEDNYrFYFBwcrNzcXAUFBTk9j5luN1m1apUGDx7s9HhsbKx69eqlzZs3q1+/fpIkq9Wqw4cPq1GjRrbz8vPzdfr0aYWFhUmSGjRooG3btjkcc/LkyUpKSnLjpwAAAAAAuBOh203y8/PVtm1bff7556WOpaSkaNKkSZLOh+/MzExJUl5ensLDw237kvTZZ59p3rx5Dse52Pjx4zVy5EjbfslMNwAAAACgeiB0X8bMZrPMZrOnywAAAAAAOOHl6QIAAAAAAKipmOl2o1WrVjl8BVhBQYFatWrlgYoAAAAAAJ5E6HaTvn37Kj8/36U+fn5+Gj58uF1b8+bNdc8997izNAAAAACAhxC6PcjPz0/Tpk2za2vTpo3atGnjoYoAAAAAAO7EM90AAAAAABiE0A0AAAAAgEEI3QAAAAAAGITQDQAAAACAQQjdAAAAAAAYhNANAAAAAIBBCN0AAAAAABiE0A0AAAAAgEF8PF0A3G9XUncFBQV5ugwAAAAAuOIx0w0AAAAAgEEI3QAAAAAAGITQDQAAAACAQQjdAAAAAAAYhNANAAAAAIBBCN0AAAAAABiEV4bVQK1fXCUvc4Cny7gspU/p5ekSAAAAANQgzHQDAAAAAGAQQjcAAAAAAAYhdAMAAAAAYBBCNwAAAAAABiF0AwAAAABgEEI3AAAAAAAGIXQDAAAAAGAQQjcAAAAAAAaplqF7zZo1iouLc8tYqamp2rBhQ5XHmTt3rhISEqpeEAAAAADgiuHjiYvGxMTo1KlT8vb2trUdP35c+/fvV0xMjEtjmUwmRURE2LUdPXpUVqtV0vkAX1hYqC5dupRbU0FBgV1NWVlZ2rdvX7k1tW3bVr///rt8fX0dHn/55Zf15JNPlmq/6aabdPDgQYd9LBaLVqxYoW7dupV5bQAAAABA9eWR0C1JmzdvVrNmzWz7UVFRGjx4sPz9/ZWdna1atWpVeKysrCy7fZPJVOmaLgzYrvwBYPny5erYsaNL19u+fbvTY4RtAAAAALj8eSx0OzJ27Fg1bNhQW7Zs0bx58zxdjuFiYmJUWFgoHx/HX4O/v/8lrggAAAAA4E7VKnS3aNFCMTExpWauq4v169froYce0h133KHBgwe7ZczU1FSXb6kHAAAAAFweqlXoHjRokPz9/XXixAkFBgZWuF9UVJSBVf2fZs2aKSEhQVdddZVde3h4uPr27eu0X3x8vGbOnOnwWGxsrN1z5Bd64oknNGnSJKfjFhQUqKCgwLZvsVicFw8AAAAAuOQ8Frrfe+89hYWF2fbz8vL0wgsvuHx7ecmCaSXy8/O1adOmStX00ksvKSgoyLb/xx9/2B1v1KiRevToUarfypUrK3W99PT0SvUrMXnyZCUlJVVpDAAAAACAcTwSul944QXl5ubatU2cOFEdO3ZUUFBQlW4vP3r0qAYNGqTMzExJ0qOPPloqmDvy1ltvKS8vz66tbdu2qlevntM+9913n0sBf/r06erfv3+Fzy/P+PHjNXLkSNu+xWJRdHS028YHAAAAAFSNR0L3k08+qTNnzignJ0eRkZFVGstisahly5a2/aKiIh0/ftzulvPQ0FDt2LGjzHH69u2r3NxcnT59Wg0aNKjQtRcvXlyqLS0tTQMHDtSuXbuc9ouNjVVGRoak87Pp/v7+doumHT58WA0aNLCtwr5gwQLdfPPNpcYxm80ym80VqhUAAAAAcOl57PbyLVu2aOLEiUpNTS11rHHjxnrwwQcrNE5QUJBtVluSkpKSNGnSJC1cuFCdOnVyqaYlS5ZozZo1Dm9tb926tQICAlwaz5nNmzfb/h0fH6/4+Hg99NBDtrbatWtr9+7dCgkJccv1AAAAAACeUa0WUivRvHlzNW/e3OV+c+fO1bx58/Tpp59qwIABWrBggTp06OCWmjp27Ojye7gBAAAAAFe2ahm6XZGVlaV169bp7bffVlhYmDZu3Kj69eurRYsWSkhIUMuWLTVo0CDFxsYycwwAAAAAuKQ8Grq3bdtW5uu+1q9fr6ZNm5Y5Rlpamr799ltNmzbN7nbym266SWlpaVq8eLHmz5+vsLAwtW/fvtyaPvvsszJXI8/Ozi53DAAAAAAAJMlkrcjS3jBMcnKy2rRpoxtvvNHWNnbsWE2aNMlucbWKsFgsCg4OVnTiQnmZ3fP8+ZUmfUovT5cAAAAA4DJQkr9yc3PtXj19scv+9vLLXUJCQqm211577dIXAgAAAABwOy9PFwAAAAAAQE1F6AYAAAAAwCCEbgAAAAAADELoBgAAAADAIIRuAAAAAAAMQugGAAAAAMAgvDKsBtqV1L3M98QBAAAAAC4NZroBAAAAADAIoRsAAAAAAIMQugEAAAAAMAihGwAAAAAAgxC6AQAAAAAwCKEbAAAAAACDELoBAAAAADAI7+mugVq/uEpe5gBPl+FW6VN6eboEAAAAAHAZM90AAAAAABiE0A0AAAAAgEEI3QAAAAAAGITQDQAAAACAQQjdAAAAAAAYhNANAAAAAIBBCN1OpKamasOGDVUeJzk5We+9954bKgIAAAAAXG4uq/d0Hz9+XNddd53T48eOHdPJkycVGBhY7lgmk0kRERF2bUePHpXVapUkrVmzRoWFherSpUuZ48TFxWnHjh3y8/Oza584caKGDRum9PR0FRYWOuzbp08fbdy40eGxvLw8zZw5U0888US5nwUAAAAAUD1dVqG7Xr16ysrKcno8ODhY/v7+FR7v4rFMJlOl6lq4cKG6devmcr+lS5c6PUbYBgAAAIDL32UVustjMpnk5XXp75j/6quvlJ6ebttv1KiR7rrrrnL7xcXFae/evapVq5bD43fccYe7SgQAAAAAeECNCd2FhYWVnqmuqqNHj9rNsPv42P9Yp0+frlmzZmnChAkaOXKk3bEFCxYoLi7uUpQJAAAAALjELovQnZGRoXbt2pVqP3nypMxms+15ah8fH0VGRkqSDh06JG9v7zLHjYqKckt9CQkJ6tatm4qLi1VYWKhz584pOztb4eHhkqSRI0fqlVdecdi3X79+MpvNDo/16NFDc+fOdUuNAAAAAIBL77II3dHR0Q6f5Y6Pj9dDDz2k+Ph4l8csWTCtRH5+vjZt2uTyOKGhoXrkkUfk5eUlb29v+fr6qlatWqpdu7ZSUlLK7FvecQAAAADA5e2yCN2XwtGjRzVo0CBlZmZKkh599NFSwdyRxYsXl3k8KipKRUVFbqnxYgUFBSooKLDtWywWQ64DAAAAAKicyyp0r1y5UgkJCbb9nJwcrV27VsOGDbO1lbW6+YUsFotatmxp2y8qKtLx48ftbjkPDQ3Vjh07KjTe0qVLNWfOHP366686d+6cfH191bx5cz311FPq06eP3bn9+vXT5s2bJUm5ubny8vJSnTp1bMePHj2q0NBQ+fr6SpKmTZumhx9+uNQ1J0+erKSkpArVBwAAAAC49EzWikznXgYKCwvl6+tbodlpR5KSkjRp0iRt3LhRnTp1cqnv7Nmz9dZbb2nu3Lnq1KmTTCaTiouLtXHjRj355JN67rnn9PTTTzvsO2rUKIWHh2vcuHG2ttatW2vevHm64YYbyryuo5nu6OhoRSculJc5wKXPUN2lT+nl6RIAAAAAwMZisSg4OFi5ubkKCgpyet6lf79WNTR37lzNmzdPn376qQYMGKCtW7e61P/LL7/UsGHD1LlzZ9sK6l5eXurSpYsSExO1bNkyI8qW2WxWUFCQ3QYAAAAAqD4uq9vL3SkrK0vr1q3T22+/rbCwMG3cuFH169dXixYtlJCQoJYtW2rQoEGKjY1VSEhImWN1795ds2fPVpcuXXT99dfb2nfs2KFZs2Zp8ODBBn8aAAAAAEB1VGNCt8lkUmBgYIXPT0tL07fffqtp06bZ3U5+0003KS0tTYsXL9b8+fMVFham9u3blznW8OHDVb9+fT333HM6dOiQioqK5OXlpUaNGmns2LEOn8cGAAAAANR8NeaZ7svVF198ocDAQN1+++22ttdee00DBw5Uo0aNXBqr5JkCnukGAAAAAGNV9JnuGjPTfbnq3bt3qbaxY8d6oBIAAAAAgLuxkBoAAAAAAAYhdAMAAAAAYBBCNwAAAAAABiF0AwAAAABgEEI3AAAAAAAGIXQDAAAAAGAQQjcAAAAAAAYhdAMAAAAAYBAfTxcA99uV1F1BQUGeLgMAAAAArnjMdAMAAAAAYBBCNwAAAAAABiF0AwAAAABgEEI3AAAAAAAGIXQDAAAAAGAQQjcAAAAAAAYhdAMAAAAAYBBCNwAAAAAABiF0AwAAAABgEEI3AAAAAAAGIXQDAAAAAGAQQjcAAAAAAAYhdAMAAAAAYBBCNwAAAAAABiF0AwAAAABgEEI3AAAAAAAG8fF0AXAfq9UqSbJYLB6uBAAAAABqtpLcVZLDnCF01yAnTpyQJEVHR3u4EgAAAAC4Mpw8eVLBwcFOjxO6a5DQ0FBJ0sGDB8v80oHLncViUXR0tDIyMhQUFOTpcgDD8LuOKwW/67hS8Ltes1itVp08eVINGzYs8zxCdw3i5XX+Ef3g4GD+R4wrQlBQEL/ruCLwu44rBb/ruFLwu15zVGSyk4XUAAAAAAAwCKEbAAAAAACDELprELPZrBdffFFms9nTpQCG4ncdVwp+13Gl4HcdVwp+169MJmt565sDAAAAAIBKYaYbAAAAAACDELoBAAAAADAIoRsAAAAAAIMQumuI/Px8PfXUU2rcuLGioqI0evRoFRcXe7oswO2sVqs++ugjdezY0dOlAIZat26dOnfurGbNmqlp06aaMWOGp0sCDDF16lRdffXVuuqqq3Tdddfpiy++8HRJgKGGDBmia665xtNl4BIidNcQzz//vIqLi7V//37t3r1bKSkpmjlzpqfLAtxq5cqVuv7665WUlKScnBxPlwMY6tNPP9XcuXO1b98+rV69WlOmTNHKlSs9XRbgdh06dNCuXbt08OBBvf3223rwwQd14sQJT5cFGOLgwYP6+OOPPV0GLjFWL68B8vLyFBERoYMHDyosLEyStGTJEr300kv64YcfPFwd4D6fffaZzGaz6tSpoyFDhmjv3r2eLgm4ZEaOHCkfHx9NnTrV06UAhgoLC9PGjRuZCUSNdP/996tBgwZas2YN/x1zBWGmuwb4/vvv1aRJE1vglqT27dtr165dKiws9GBlgHvFx8frnnvu8XQZgEccP35cwcHBni4DMMyZM2f01ltvqX379gRu1EjLli3TH3/8ofj4eE+XgkuM0F0DHD58WBEREXZt9evXV2FhoSwWi4eqAgC4y3fffadly5apf//+ni4FcLv9+/crOjpaAQEBmj9/Po/HoUY6fPiwnnnmGc2aNcvTpcADCN01QFFRkS5+SqCoqEiSZDKZPFESAMBNFi1apD59+uijjz5SkyZNPF0O4HZNmzZVRkaGTp8+rcTERMXGxurXX3/1dFmA2xQXF6t///4aPXq0rr76ak+XAw8gdNcAoaGhys7Otms7fvy4/P39uRURAC5TRUVFeuaZZ/Tiiy/q66+/5tEK1Hi1atVS//79dc899+jDDz/0dDmA27z00kuqU6eOnnnmGU+XAg/x8XQBqLqbbrpJP//8s/7880/VrVtXkrRx40a1b99eXl78XQUALkcjRozQ/v379d1336l27dqeLge4ZMxmswICAjxdBuA2s2fP1qlTp2z/nV5YWKj8/HyFhIRo27Ztat68uYcrhNFIZDVAZGSkevTooQkTJqiwsFDZ2dn6+9//rsTERE+XBgCohPz8fM2aNUsffvghgRs12qFDh/Tpp5/aFn799ttvtXTpUj3wwAMergxwnyNHjshisSgnJ0c5OTlatmyZmjdvrpycHAL3FYKZ7hrivffe0+DBg9WgQQMFBgZq1KhR6tu3r6fLAgBUwu+//67i4mJ16NDBrr1p06Zau3ath6oC3M9sNuu9997TiBEjVKdOHTVt2lRffPGFmjVr5unSAMBteE83AAAAAAAG4fZyAAAAAAAMQugGAAAAAMAghG4AAAAAAAxC6AYAAAAAwCCEbgAAAAAADELoBgAAAADAIIRuAAAAAAAMQugGAABuFxcXp6KiIk+XAQCAx5msVqvV00UAAIDLR0pKiu68806FhobatdeqVUvp6emSJJPJpHPnzsnHx8d2fOPGjerTp4/DMYuLixUQEKDMzEzD6gYAwBOY6QYAAC5r3769srKy7LaSwO1M586dlZ2d7XDbsWOH034TJkzQm2++WW5NW7du1S233KJz5865+nEAADCMT/mnAAAAVF1KSop69OihyMhIh8ejo6NLtaWlpSk1NVXr168vd/wOHTqoS5cumjJliv7nf/6nyvUCAOAOhG4AAGCIyMhI+fj4KCsry9bWsWNHpaSkVHiMadOmacKECTKZTBU6//nnn9d1112n5557TrVr13a1ZAAA3I7bywEAgFsUFRXp7Nmztv2S284vtHnzZkVFRTnd9uzZYzfexo0bdccdd9jaDh06pN69eys8PFxNmzbVu+++a/cseWhoqG688UZ98803xn5YAAAqiJluAADgEm9vb+3atUsNGzaUyWSSyWSSl5eXfH199be//U2jRo1y2C8uLk4FBQUVvs5vv/2mpk2bytvb29b24IMP6pZbbtGSJUtUXFysESNGlBqzQ4cO2rZtm+65557KfUAAANyI0A0AAFzSpUsX5eTklHlOmzZtKnxLuDPZ2dmqX7++bf+HH37Qb7/9pvXr18vb21ve3t6aNm2aZs+ebdevfv36+uGHH6p0bQAA3IXQDQAAKiUrK0v/+Mc/tGLFCp08eVKSVKdOHfXs2VOrVq2yzVBv3rxZ/fr1kyRZrVYdPnxYjRo1so2Tn5+v06dPKywsTJLUoEEDbdu2TWaz2W4We9++fWrRooXdzHdgYKB8fX3t6srPz1etWrWM+dAAALiIZ7oBAIDLzpw5o06dOslsNmvt2rX67bff9Ntvv2nNmjXy9fVVbGyszpw5I0mKjY1VZmamMjMz9fPPP8tsNtv2MzMzNXv2bHXv3t22v23bNklSVFSUDhw4YLtmWFiYDh06ZFfH4cOHS91efuDAAV111VUG/wQAAKgYQjcAAHDZrl27dPLkSU2aNEnh4eG29nr16umll17S6dOntXv37ipdo379+iooKFB2drak8+H97Nmztnd2nzp1SmPGjJGXl/1/zqxdu1a33357la4NAIC7ELoBAIDLWrZsKX9/f02bNk15eXm29ry8PL3xxhvy8/PTtddeW+XrPPbYY5o1a5Ykyd/fX8uWLdPixYvVoEED3XzzzRo4cKC8vLwUGBgoSUpNTVVgYKDatGlT5WsDAOAOhG4AAOCygIAAbdq0SYcPH1aHDh109dVXq0WLFmrfvr0OHjyojRs3KiAgoMrXGTJkiL744gtlZGRIkq677jpt2LBBR44c0Q8//KC//OUvCggIUL169XTu3DmNHz/eNhMOAEB1wEJqAACgUqKiolwOuH5+fho+fLhdW/PmzZ2+3iswMFDvv/++0tLSFB0dreXLl6tbt24ym806duyYhg0bpqFDh0qSfvrpJ40aNUodO3as3AcCAMAAJqvVavV0EQAAABXx1FNPacWKFfL29lZAQIAGDBigMWPGyM/Pz9OlAQDgEKEbAAAAAACD8Ew3AAAAAAAGIXQDAAAAAGAQQjcAAAAAAAYhdAMAAAAAYBBCNwAAAAAABiF0AwAAAABgEEI3AAAAAAAGIXQDAAAAAGAQQjcAAAAAAAb5//fiI+ve0y8RAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for c in num_cols:\n",
    "    mean = df_clean.groupby(CAT)[c].mean().sort_values(ascending=False)\n",
    "    plt.figure(figsize=(10,5))\n",
    "    plt.barh(mean.index.astype(str), mean.values)\n",
    "    plt.gca().invert_yaxis()\n",
    "    plt.title(f\"{c} - {CAT}별 평균\")\n",
    "    plt.xlabel(c); plt.tight_layout(); plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
